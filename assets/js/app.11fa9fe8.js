"use strict";(self.webpackChunktechnology_life_blog=self.webpackChunktechnology_life_blog||[]).push([[3524],{1709:(e,t,a)=>{a.d(t,{l:()=>s});const s=JSON.parse('{"category":{"/":{"path":"/category/","map":{"408":{"path":"/category/408/","indexes":[0,1,2,3,4,5,6,7,8,9,10,11,12,13]},"周周新鲜事":{"path":"/category/%E5%91%A8%E5%91%A8%E6%96%B0%E9%B2%9C%E4%BA%8B/","indexes":[14]},"国内外":{"path":"/category/%E5%9B%BD%E5%86%85%E5%A4%96/","indexes":[14]},"新技术":{"path":"/category/%E6%96%B0%E6%8A%80%E6%9C%AF/","indexes":[14]},"神奇动物":{"path":"/category/%E7%A5%9E%E5%A5%87%E5%8A%A8%E7%89%A9/","indexes":[14]},"有趣实验":{"path":"/category/%E6%9C%89%E8%B6%A3%E5%AE%9E%E9%AA%8C/","indexes":[14]},"数据结构":{"path":"/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","indexes":[4,5,6,7,10,11,12]},"引言":{"path":"/category/%E5%BC%95%E8%A8%80/","indexes":[5]},"图":{"path":"/category/%E5%9B%BE/","indexes":[6]},"线性结构":{"path":"/category/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/","indexes":[7]},"算法":{"path":"/category/%E7%AE%97%E6%B3%95/","indexes":[8,9]},"查找算法":{"path":"/category/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/","indexes":[8]},"排序算法":{"path":"/category/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/","indexes":[9]},"栈、队列、数组":{"path":"/category/%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E3%80%81%E6%95%B0%E7%BB%84/","indexes":[10]},"串":{"path":"/category/%E4%B8%B2/","indexes":[4]},"树":{"path":"/category/%E6%A0%91/","indexes":[12]},"计算机网络":{"path":"/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","indexes":[0,1,2,3]},"网络层":{"path":"/category/%E7%BD%91%E7%BB%9C%E5%B1%82/","indexes":[3]},"传输层":{"path":"/category/%E4%BC%A0%E8%BE%93%E5%B1%82/","indexes":[0,1,2]},"概述":{"path":"/category/%E6%A6%82%E8%BF%B0/","indexes":[0]},"TCP":{"path":"/category/tcp/","indexes":[1]},"UDP":{"path":"/category/udp/","indexes":[2]}}}},"tag":{"/":{"path":"/tag/","map":{"走进项目":{"path":"/tag/%E8%B5%B0%E8%BF%9B%E9%A1%B9%E7%9B%AE/","indexes":[15]},"O(n)~":{"path":"/tag/o(n)~/","indexes":[11]}}}}}')},1716:(e,t,a)=>{a.d(t,{B:()=>I});var s={};a.r(s);var n={};a.r(n);var i={};a.r(i);var r={};a.r(r);var o={};a.r(o),a.d(o,{default:()=>y});var l={};a.r(l),a.d(l,{default:()=>x});var p={};a.r(p);var c={};a.r(c);var m={};a.r(m),a.d(m,{default:()=>j});var d={};a.r(d),a.d(d,{default:()=>P});var h={};a.r(h),a.d(h,{default:()=>_});var g=a(3349),u=a(1781),b=a(9212);const y={enhance:({app:e})=>{e.component("CodeTabs",u.S),e.component("Tabs",b.t)}};var E=a(7870),v=a(3027);const x={enhance:({app:e})=>{e.component("CodeDemo",E.A),e.component("MdDemo",v.A)}};var f=a(5496),w=a(355),k=a(457),B=a(1230),A=a(7786),T=a(641),C=a(307);const j={enhance:({app:e})=>{(0,B.L4)("VPIcon")||e.component("VPIcon",(e=>(0,T.h)(C.G,{type:"fontawesome",prefix:"fa6-solid:",...e})))},setup:()=>{(0,A.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/solid.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,A.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/regular.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,A.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/fontawesome.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}})}};var L=a(4344),M=a(703),J=a(596),z=a(8831);const P={enhance:({app:e})=>{(0,M.L4)("Badge")||e.component("Badge",J.A),(0,M.L4)("VPCard")||e.component("VPCard",z.A)},setup:()=>{},rootComponents:[]};var D=a(6358),q=a(3827),F=a(1599),V=a(1770),O=a(783),S=a(8465),G=a(7107),N=a(9920);(0,S.M_)((e=>{const t=e.title,a=!1!==e.index,s=e.icon;return a?{title:t,content:s?()=>[(0,T.h)((0,T.g2)("VPIcon"),{icon:s}),t]:null,order:e.order,index:e.index}:null}));const _={enhance:({app:e,router:t})=>{const{scrollBehavior:a}=t.options;t.options.scrollBehavior=async(...e)=>(await O.lE.wait(),a(...e)),(0,O.X4)(e),e.component("BloggerInfo",G.tI),e.component("SocialMedias",G.rS),e.component("GlobalEncrypt",N.J),e.component("LocalEncrypt",N.n)},setup:()=>{(0,O.fv)(),(0,O.i$)(),(0,G.su)()},layouts:{Layout:O.PE,NotFound:O.Mk,BlogCategory:G.Pn,BlogHome:G.qX,BlogType:G.z7,Timeline:G.Kf}},I=[s,n,i,g,r,o,l,p,c,f,w,k,m,L,d,D,q,F,V,h].map((e=>e.default)).filter(Boolean)},2878:(e,t,a)=>{a.d(t,{P:()=>s});const s={Github:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>'}},3781:(e,t,a)=>{a.d(t,{U:()=>s});const s=JSON.parse('{"article":{"/":{"path":"/article/","indexes":[0,1,2,3,16,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,13,23,24,15,25,26,27,14]}},"star":{"/":{"path":"/star/","indexes":[]}},"timeline":{"/":{"path":"/timeline/","indexes":[0,1,2,3,16,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,13,23,24,15,25,26,27,14]}}}')},4776:(e,t,a)=>{a.d(t,{M:()=>s});const s=JSON.parse('["/cs-basic/computer-network/transport-layer/overview.html","/cs-basic/computer-network/transport-layer/tcp-transmission-control-protocol.html","/cs-basic/computer-network/transport-layer/udp-user-datagram-protocol.html","/cs-basic/computer-network/network-layer/overview.html","/cs-basic/data-structure/string.html","/cs-basic/data-structure/","/cs-basic/data-structure/graph.html","/cs-basic/data-structure/linear-list.html","/cs-basic/data-structure/search-algorithm.html","/cs-basic/data-structure/sort-algorithm.html","/cs-basic/data-structure/stack-queue-array.html","/cs-basic/data-structure/time-and-space-complexity.html","/cs-basic/data-structure/tree-binary-tree.html","/cs-basic/","/week-update/","/java-coffee/about-java-coffee.html","/cs-basic/computer-network/network-layer/the-two-services.html","/cs-basic/operating-system/REANDME.html","/cs-basic/computer-network/physical-layer/overview.html","/cs-basic/computer-network/","/cs-basic/computer-network/preface/computer-network-details.html","/cs-basic/computer-network/preface/first-introduction-to-computer-networks.html","/about-the-author/","/java/","/java-coffee/","/java-coffee/contribution-java-coffee.html","/java-coffee/use-java-coffee-suggestions.html","/read-book-thinking/"]')},4923:(e,t,a)=>{},6653:(e,t,a)=>{a.d(t,{K:()=>s});const s=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":{"tokens":["$2b$10$8s8gdWa8MeIK4wQJubIhC.uqH6qBK.8TukJ/GH/bqGv36eRKuDhEe"],"hint":"Password: 1234"}}},"breadcrumb":false,"editLink":false,"focus":false,"pure":true,"fullscreen":true,"author":{"name":"阿杰 like coding bug ❥","url":"https://mister-hope.com"},"logo":"/favicon.ico","repo":"https://github.com/amatureemoprince","docsDir":"src","footer":"茶与代码，诗与远方 | 一个程序员的技术与生活随想","displayFooter":true,"blog":{"intro":"/about-the-author/","sidebarDisplay":"mobile","medias":{"Github":"https://github.com/"}},"pageInfo":["Author","Category","Tag","Original","Word","ReadingTime","PageView"],"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":[{"text":"首页","icon":"bookmark","link":"/"},{"text":"使用指南","icon":"compass","link":"/java-coffee/"},{"text":"Java 生态圈","icon":"laptop-code","link":"/java/"},{"text":"计算机基础","icon":"book-open","link":"/cs-basic/"},{"text":"笔隙杂谈","icon":"feather","link":"/read-book-thinking/"},{"text":"周周新鲜事","icon":"lightbulb","link":"/week-update/"},{"text":"网站相关","icon":"users","children":[{"text":"查看历史","link":"/article/","icon":"book"},{"text":"关于作者","link":"/about-the-author/","icon":"user"}]}],"sidebar":{"/java-coffee/":[{"text":"必看","collapsible":true,"icon":"star","children":["about-java-coffee","use-java-coffee-suggestions"],"expanded":false}],"/java/":[{"text":"java基础","link":"basic/","icon":"lightbulb"}],"/cs-basic/":[{"text":"计算机网络","collapsible":true,"icon":"network-wired","prefix":"computer-network/","children":[{"collapsible":true,"text":"前言","prefix":"preface/","children":["first-introduction-to-computer-networks","computer-network-details"],"expanded":true},{"text":"物理层","collapsible":true,"prefix":"physical-layer/","children":["overview.md"],"expanded":true},{"text":"网络层","collapsible":true,"expanded":true,"prefix":"network-layer","children":["overview.md","the-two-services.md"]},{"text":"传输层","collapsible":true,"expanded":true,"prefix":"transport-layer","children":["overview.md","udp-user-datagram-protocol.md","tcp-transmission-control-protocol.md"]}],"expanded":true},{"text":"数据结构","collapsible":true,"prefix":"data-structure/","icon":"folder-tree","children":["README.md","time-and-space-complexity.md","linear-list.md","stack-queue-array.md","string.md","tree-binary-tree.md","graph.md","search-algorithm.md","sort-algorithm.md"],"expanded":true},{"text":"计算机组成原理","collapsible":true,"icon":"computer","children":[],"expanded":false},{"text":"操作系统","collapsible":true,"icon":"fa-solid fa-laptop","children":[],"expanded":false}]}}}}')},8123:(e,t,a)=>{a.d(t,{v:()=>s});const s={}},8164:(e,t,a)=>{a.d(t,{J:()=>n,c:()=>s});const s=JSON.parse("{}"),n=Object.fromEntries([["/",{loader:()=>a.e(4470).then(a.bind(a,1146)),meta:{title:"Java咖啡馆 ☕",icon:"coffee"}}],["/about-the-author/",{loader:()=>a.e(8734).then(a.bind(a,9772)),meta:{date:1740734587e3,excerpt:"\n",readingTime:{minutes:0,words:1},title:"Readme",type:"article"}}],["/cs-basic/",{loader:()=>a.e(3214).then(a.bind(a,573)),meta:{date:1740734587e3,category:["408"],excerpt:'<h2>🎉欢迎来到计算机的魔法世界！🎩</h2>\n<p>这里没有分院帽，但每个工科生都会收到属于自己的入学礼物——一台会施法的金属盒子！它能瞬间传送信息到地球另一端，能用二进制咒语创造虚拟宇宙，甚至还会在你写代码时调皮地吐出"BUG"小精灵~ 🧙♂️💻</p>\n<p>不过小心！霍格沃茨有伏地魔，计算机界也有令人闻风丧胆的"408大魔王"！这个由数据结构、操作系统、计组和网络组成的四头巨龙，每年都要吞噬无数勇士的头发（和睡眠）👾💤</p>\n<p>但别怕！本巫师刚通关拿到了SSS级秘籍：<br>\n✨ 在算法迷宫里学会了幻影移形（DFS/BFS双修）<br>\n✨ 用缓存咒语把OS大BOSS的攻击伤害降到最低<br>\n✨ 甚至参透了计组炼金术的终极奥义！</p>',readingTime:{minutes:1.71,words:513},title:"开篇",icon:"computer",type:"article"}}],["/java/",{loader:()=>a.e(5891).then(a.bind(a,142)),meta:{date:1740734587e3,readingTime:{minutes:.01,words:2},title:"Java",type:"article"}}],["/java-coffee/",{loader:()=>a.e(7154).then(a.bind(a,9068)),meta:{date:1740734587e3,excerpt:'<h2>Java爬山之路☕️（值得一读的Java基础👍）</h2>\n<h3>Java的发展历史</h3>\n<ul>\n<li><a href="">什么是Java</a></li>\n</ul>\n<h3>Java的特点</h3>\n<ul>\n<li><a href="">广为人知的三大特性</a></li>\n</ul>\n<h3>Java的基本语法</h3>\n<ul>\n<li><a href="">工欲善其事必先利其器——开发工具的选择（我首推IDEA）</a></li>\n</ul>\n<h3>Java高阶</h3>\n<ul>\n<li><a href="">现代飞鸽传书——网络编程</a></li>\n<li><a href="">文件操作——为什么看见这个就头痛呢？</a></li>\n<li><a href="">让CPU“火热一下”——并发编程</a></li>\n<li><a href="">深入了解一下JVM吧！</a></li>\n</ul>',readingTime:{minutes:.93,words:280},title:"使用指南",type:"article"}}],["/java-coffee/about-java-coffee.html",{loader:()=>a.e(2457).then(a.bind(a,8966)),meta:{date:1740734587e3,tag:["走进项目"],excerpt:'\n<h2>核心内容</h2>\n<p>在网络世界中不乏存在着优秀的博客，在阅读过这些优质的内容后，也萌发出了“我也要拥有一个”的想法。（人们对于美好的东西想法总是这样的）<br>\n于是就诞生了 <strong>Java咖啡馆</strong>，正如这个名字一样，这里不仅仅有<strong>Java</strong>还有“<strong>咖啡</strong>”。</p>\n<ul>\n<li>\n<p><strong>对于是想学习计算机相关知识的朋友</strong> -<a href="/cs-basic/" target="_blank">畅游计算机海洋</a> 绝对是你心中理想的一份学习资源。</p>\n</li>\n<li>\n<p><strong>对于是刚刚开始学习Java的朋友</strong> 推荐你去-<a href="../java">Java爬山之路</a> 中学习一下，这会让你对Java有更深刻地理解和更为具体的学习路线，让你不再对学习感到迷茫。</p>\n</li>\n<li>\n<p><strong>对于是学习完了Java想要更进一步掌握框架和各种中间件的朋友</strong> -<a href="../java">Java生态之砍瓜切菜</a> 是非常适合你的，我会从基础到复杂循序渐进地讲述什么是框架，怎样快速上手一个新的框架。</p>\n</li>\n<li>\n<p><strong>对于是想了解各种新鲜事的朋友</strong> 欢迎你来到我的周刊-<a href="../week-update">周周新鲜事</a> ，不光有国内外趣事，还有科技新发现。</p>\n</li>\n<li>\n<p><strong>这里是我看过的觉得好看有趣的书籍</strong> -<a href="../read-book-thinking">好看的书籍</a></p>\n</li>\n</ul>',readingTime:{minutes:2.1,words:629},title:"项目介绍",icon:"clipboard",type:"article"}}],["/java-coffee/contribution-java-coffee.html",{loader:()=>a.e(1512).then(a.bind(a,6721)),meta:{date:1740734587e3,readingTime:{minutes:.02,words:7},title:"贡献指南",icon:"handshake",type:"article"}}],["/java-coffee/use-java-coffee-suggestions.html",{loader:()=>a.e(3547).then(a.bind(a,4265)),meta:{date:1740734587e3,excerpt:"<h2>怎样学习</h2>\n<p>我在学习的过程中喜欢<strong>总结和记录</strong>。</p>\n<p>在学习一个新的知识点时，将关于这个知识的内容用自己的语言描述出来，如果在描述的过程中发现有卡顿或者不知道怎样说的情况，那就说明还需要再去看一下、理解一下。</p>\n<p>这里就涉及到了多种学习的目的了，如果是为了应试，就去做一些题巩固知识点。如果是一门技术，就在一个实际的场景中进行运用。如：学习了Redis的基本用法，就去采用<strong>侧路旁观</strong>模式进行测试一下，看看api访问时间是不是提升了。这样在学习的过程中不仅仅是有理论，更有实际的例子供自己理解。</p>",readingTime:{minutes:1.83,words:548},title:"学习建议",icon:"star",type:"article"}}],["/read-book-thinking/",{loader:()=>a.e(2046).then(a.bind(a,7461)),meta:{date:1740734587e3,excerpt:"\n",readingTime:{minutes:.01,words:4},title:"读书后感",type:"article"}}],["/week-update/",{loader:()=>a.e(7055).then(a.bind(a,4973)),meta:{date:1740734587e3,category:["周周新鲜事","国内外","新技术","神奇动物","有趣实验"],readingTime:{minutes:.1,words:29},title:"周周新鲜事",icon:"kiwi-bird",type:"article"}}],["/cs-basic/computer-network/",{loader:()=>a.e(9169).then(a.bind(a,5882)),meta:{date:1740906787e3,readingTime:{minutes:.02,words:6},title:"计算机网络",type:"article"}}],["/cs-basic/data-structure/",{loader:()=>a.e(1811).then(a.bind(a,4828)),meta:{date:1740981411e3,category:["408","数据结构","引言"],excerpt:'<h2>啊，多么美妙（复杂）的数据结构啊！</h2>\n<div class="hint-container tip">\n<p class="hint-container-title">悄悄告诉你</p>\n<p>括号里的话才是我想说的</p>\n</div>\n<p>我们对于数据结构的认识就是复杂，难，不好思考。但是日常生活中却遍布着数据结构的思想。（只是需要一双善于观察的眼睛👀）</p>\n<ul>\n<li>\n<p>我们在排队等待“叫号”时，不就是一个<strong>队列➡️</strong>吗？</p>\n</li>\n<li>\n<p>我们存在不同人的QQ列表里，不就是一个<strong>图👤</strong>吗？</p>\n</li>\n<li>\n<p>我们打牌时情不自禁地将牌从小到大的排序，不就是<strong>选择排序</strong>吗？</p>\n</li>\n<li>\n<p>........</p>\n</li>\n</ul>',readingTime:{minutes:2.69,words:807},title:"引言",icon:"star-of-life",type:"article"}}],["/cs-basic/data-structure/graph.html",{loader:()=>a.e(951).then(a.bind(a,5017)),meta:{date:1740981411e3,category:["408","数据结构","图"],excerpt:'<h2><strong>图的基础</strong></h2>\n<blockquote>\n<p>定义：图G由顶点集V和边集E组成，记为 <strong>G = (V, E)</strong> ，其中 <strong>V(G)</strong> 表示图G中<strong>顶点的有限非空集</strong>； <strong>E(G)</strong> 表示图G种<strong>边的集合</strong>。若V={<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">v_1, v_2,...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span></span></span></span>}则|V|表示G中顶点的个数，E={(u, w)|u∈V,v∈V}，则|E|代表G中边的条数。</p>\n</blockquote>',readingTime:{minutes:15.11,words:4534},title:"图",icon:"image",type:"article"}}],["/cs-basic/data-structure/linear-list.html",{loader:()=>a.e(1355).then(a.bind(a,4670)),meta:{date:1740981411e3,category:["408","数据结构","线性结构"],excerpt:"<h2>线性表的定义</h2>\n<blockquote>\n<p>线性表是具有<strong>相同数据类型</strong>的n（n &gt;= 0）个数据元素的<strong>有限序列</strong>，其中n为表长，当n = 0时线性表是一个空表。若使用L命名线性表，则表示为：<br>\n<strong>L = (a1, a2, ..., an)</strong></p>\n</blockquote>\n<p>重要的是有限个且类型相同。我们可以知道线性表有以下的特性：</p>\n<ul>\n<li>元素类型相同。</li>\n<li>个数有限。</li>\n<li>除了第一个元素，其余每个元素都有一个直接前驱。</li>\n<li>除了最后一个元素，其余每个元素都有一个直接后继。</li>\n</ul>",readingTime:{minutes:11.77,words:3532},title:"线性表",icon:"water",type:"article"}}],["/cs-basic/data-structure/search-algorithm.html",{loader:()=>a.e(7327).then(a.bind(a,9928)),meta:{date:1740981411e3,category:["408","算法","查找算法"],excerpt:"<h2>树形查找</h2>\n<h3>红黑树</h3>\n<p>为什么会引入红黑树呢？因为在对AVL树进行插入或删除后，为了维持AVL树的平衡性，可能会进行频繁地调整</p>\n<p><strong>整棵树</strong>的拓扑结构，为了减少代价，故引入红黑树这个在AVL树基础上放宽了条件的数据结构。</p>\n<blockquote>\n<p>满足一下条件的<strong>二叉排序树</strong>为红黑树。</p>\n<ul>\n<li>每个节点要么是黑色要么是红色的</li>\n<li>根节点是黑色的</li>\n<li>叶节点（虚构的外部节点、NULL节点）都是黑色的</li>\n<li>不存在两个相邻的红节点（红节点的父节点和孩子节点都为黑色）</li>\n<li>对于每个节点，从该节点到任意一个叶节点的简单路径上，所包含的黑色节点数相同</li>\n</ul>\n</blockquote>",readingTime:{minutes:1.41,words:424},title:"查找算法",icon:"magnifying-glass",type:"article"}}],["/cs-basic/data-structure/sort-algorithm.html",{loader:()=>a.e(8607).then(a.bind(a,2083)),meta:{date:1740981411e3,category:["408","算法","排序算法"],excerpt:'<h2>算法的稳定性</h2>\n<h2>插入排序</h2>\n<p>时间复杂度：</p>\n<ul>\n<li>最好情况下的：O(n)</li>\n<li>最坏情况下的：O(<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>)</li>\n<li>平均情况下的：O(<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>)</li>\n</ul>',readingTime:{minutes:.87,words:262},title:"排序算法",icon:"sort",type:"article"}}],["/cs-basic/data-structure/stack-queue-array.html",{loader:()=>a.e(5141).then(a.bind(a,6765)),meta:{date:1740981411e3,category:["408","数据结构","栈、队列、数组"],excerpt:'<h2>栈</h2>\n<blockquote>\n<p>定义：只允许在一端进行插入或删除操作的线性表。</p>\n</blockquote>\n<p>我们要明白<strong>栈</strong>也是一种<strong>线性表</strong>，但是一端被限制了操作，其具有<strong>先进后出</strong>的特性。</p>\n<figure><img src="https://camo.githubusercontent.com/bf726c3e9b289d532c43ec756e145c31b661b44619c6527f6719d51d3895e84d/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f79757175652f302f323032352f706e672f34383037333733302f313734313331363033323730312d35316632356230612d393565342d343366352d623936652d3364393537383330386161312e706e67" alt="栈的示意图" tabindex="0" loading="lazy"><figcaption>栈的示意图</figcaption></figure>',readingTime:{minutes:15.54,words:4661},title:"栈、队列和数组",icon:"hands-bubbles",type:"article"}}],["/cs-basic/data-structure/string.html",{loader:()=>a.e(8202).then(a.bind(a,9478)),meta:{date:1741330391e3,category:["408","数据结构","串"],excerpt:'<h2>串的定义</h2>\n<blockquote>\n<p>定义：由零个或多个字符组成的有限序列。</p>\n</blockquote>\n<p>记为：S = \'<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><msub><mi>a</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_1a_2...a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>\'  (<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n \\geq 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>)</p>',readingTime:{minutes:6.53,words:1958},title:"串",icon:"paper-plane",type:"article"}}],["/cs-basic/data-structure/time-and-space-complexity.html",{loader:()=>a.e(6230).then(a.bind(a,5368)),meta:{date:1740981411e3,category:["408","数据结构"],tag:["O(n)~"],excerpt:"<h2>算法的好坏评价标准</h2>\n<p>我们说这是一个优秀的算法，那是一个糟糕的算法，不是看是谁写的，也不是看是谁先提出来的，而是根据该算法的<strong>时间复杂度</strong>和<strong>空间复杂度</strong>来决定的。</p>\n<p>那怎样进行判断呢？</p>\n<p>我们就不搞数学那一套了，直接使用更为简单易懂的形式进行理解。</p>\n<h2>时间复杂度</h2>\n<p>第一眼看到这个名词的时候还以为是让一段程序在电脑上运行一下同时统计运行使用的时间嘞，但回头一想，这样好像不太科学吧！</p>\n<p>是的，如果只是简单的采用在电脑上运行的时间作为评判，那就滑天下之大稽了。思考一下，你的20000元的电脑和我的3000元的电脑玩原神的流畅度，肯定是不能比的。在这里也是同理，不同的电脑对于同一段程序跑出来的时耗也是不同的，甚至是天差地别！</p>",readingTime:{minutes:6,words:1799},title:"评判算法好坏的标准",icon:"bugs",type:"article"}}],["/cs-basic/data-structure/tree-binary-tree.html",{loader:()=>a.e(9218).then(a.bind(a,8203)),meta:{date:1740981411e3,category:["408","数据结构","树"],excerpt:'<h2><strong>树的定义</strong></h2>\n<blockquote>\n<p>定义：是n(<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n \\geq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>)个节点的<strong>有限集</strong>。当n = 0时，称为空树。在任意一颗非空树中应满足：</p>\n<ol>\n<li>有且仅有一个特定的称为<strong>根</strong>的结点。</li>\n<li>当n &gt; 1时，其余节点可分为m(m &gt; 0)个互不相交的树，并称其为<strong>子树</strong>。</li>\n</ol>\n</blockquote>',readingTime:{minutes:21.82,words:6545},title:"树",icon:"tree",type:"article"}}],["/cs-basic/operating-system/REANDME.html",{loader:()=>a.e(3420).then(a.bind(a,1117)),meta:{date:1740981411e3,title:"",type:"article"}}],["/cs-basic/computer-network/network-layer/overview.html",{loader:()=>a.e(1773).then(a.bind(a,2911)),meta:{date:1742133387e3,category:["408","计算机网络","网络层"],readingTime:{minutes:.06,words:18},title:"网络层概述",icon:"paperclip",type:"article"}}],["/cs-basic/computer-network/network-layer/the-two-services.html",{loader:()=>a.e(73).then(a.bind(a,4275)),meta:{date:1742133387e3,excerpt:"<p>分片：是将IP数据报中的数据部分进行分片，片的大小一定为8字节的整数倍。偏移量是数据部分的字节长度除以8。</p>\n",readingTime:{minutes:.2,words:59},title:"网络层提供的服务",icon:"inbox",type:"article"}}],["/cs-basic/computer-network/physical-layer/overview.html",{loader:()=>a.e(9708).then(a.bind(a,1871)),meta:{date:1740981411e3,readingTime:{minutes:.03,words:9},title:"物理层概述",icon:"plant-wilt",type:"article"}}],["/cs-basic/computer-network/preface/computer-network-details.html",{loader:()=>a.e(2017).then(a.bind(a,4548)),meta:{date:1740906787e3,readingTime:{minutes:.04,words:13},title:"计算机网络的各种“细节”",icon:"info",type:"article"}}],["/cs-basic/computer-network/preface/first-introduction-to-computer-networks.html",{loader:()=>a.e(1153).then(a.bind(a,7753)),meta:{date:1740906787e3,readingTime:{minutes:.04,words:12},title:"初始计算机网络",icon:"star-of-life",type:"article"}}],["/cs-basic/computer-network/transport-layer/overview.html",{loader:()=>a.e(5372).then(a.bind(a,7692)),meta:{date:1742389778e3,category:["408","计算机网络","传输层","概述"],readingTime:{minutes:.07,words:20},title:"传输层概述",icon:"truck",type:"article"}}],["/cs-basic/computer-network/transport-layer/tcp-transmission-control-protocol.html",{loader:()=>a.e(6330).then(a.bind(a,7542)),meta:{date:1742389778e3,category:["408","计算机网络","TCP","传输层"],readingTime:{minutes:.07,words:22},title:"传输控制协议——TCP",icon:"shield-halved",type:"article"}}],["/cs-basic/computer-network/transport-layer/udp-user-datagram-protocol.html",{loader:()=>a.e(3305).then(a.bind(a,5550)),meta:{date:1742389778e3,category:["408","计算机网络","UDP","传输层"],readingTime:{minutes:.08,words:23},title:"用户数据报协议——UDP",icon:"truck-fast",type:"article"}}],["/404.html",{loader:()=>a.e(7490).then(a.bind(a,1489)),meta:{title:""}}],["/cs-basic/operating-system/",{loader:()=>a.e(984).then(a.bind(a,6468)),meta:{title:"Operating System"}}],["/cs-basic/computer-network/network-layer/",{loader:()=>a.e(7036).then(a.bind(a,2471)),meta:{title:"Network Layer"}}],["/cs-basic/computer-network/physical-layer/",{loader:()=>a.e(5819).then(a.bind(a,4632)),meta:{title:"Physical Layer"}}],["/cs-basic/computer-network/preface/",{loader:()=>a.e(1886).then(a.bind(a,4795)),meta:{title:"Preface"}}],["/cs-basic/computer-network/transport-layer/",{loader:()=>a.e(9819).then(a.bind(a,6776)),meta:{title:"Transport Layer"}}],["/category/",{loader:()=>a.e(3583).then(a.bind(a,3233)),meta:{title:"分类",index:!1}}],["/category/408/",{loader:()=>a.e(5940).then(a.bind(a,7060)),meta:{title:"408 分类",index:!1}}],["/category/%E5%91%A8%E5%91%A8%E6%96%B0%E9%B2%9C%E4%BA%8B/",{loader:()=>a.e(7817).then(a.bind(a,3960)),meta:{title:"周周新鲜事 分类",index:!1}}],["/category/%E5%9B%BD%E5%86%85%E5%A4%96/",{loader:()=>a.e(4660).then(a.bind(a,5361)),meta:{title:"国内外 分类",index:!1}}],["/category/%E6%96%B0%E6%8A%80%E6%9C%AF/",{loader:()=>a.e(2497).then(a.bind(a,3275)),meta:{title:"新技术 分类",index:!1}}],["/category/%E7%A5%9E%E5%A5%87%E5%8A%A8%E7%89%A9/",{loader:()=>a.e(5336).then(a.bind(a,6729)),meta:{title:"神奇动物 分类",index:!1}}],["/category/%E6%9C%89%E8%B6%A3%E5%AE%9E%E9%AA%8C/",{loader:()=>a.e(4146).then(a.bind(a,5305)),meta:{title:"有趣实验 分类",index:!1}}],["/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",{loader:()=>a.e(9641).then(a.bind(a,882)),meta:{title:"数据结构 分类",index:!1}}],["/category/%E5%BC%95%E8%A8%80/",{loader:()=>a.e(5913).then(a.bind(a,8851)),meta:{title:"引言 分类",index:!1}}],["/category/%E5%9B%BE/",{loader:()=>a.e(1434).then(a.bind(a,9325)),meta:{title:"图 分类",index:!1}}],["/category/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/",{loader:()=>a.e(5281).then(a.bind(a,4972)),meta:{title:"线性结构 分类",index:!1}}],["/category/%E7%AE%97%E6%B3%95/",{loader:()=>a.e(9544).then(a.bind(a,1659)),meta:{title:"算法 分类",index:!1}}],["/category/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/",{loader:()=>a.e(9355).then(a.bind(a,6464)),meta:{title:"查找算法 分类",index:!1}}],["/category/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",{loader:()=>a.e(9207).then(a.bind(a,242)),meta:{title:"排序算法 分类",index:!1}}],["/category/%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E3%80%81%E6%95%B0%E7%BB%84/",{loader:()=>a.e(8908).then(a.bind(a,6091)),meta:{title:"栈、队列、数组 分类",index:!1}}],["/category/%E4%B8%B2/",{loader:()=>a.e(4310).then(a.bind(a,9521)),meta:{title:"串 分类",index:!1}}],["/category/%E6%A0%91/",{loader:()=>a.e(7711).then(a.bind(a,4223)),meta:{title:"树 分类",index:!1}}],["/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",{loader:()=>a.e(8387).then(a.bind(a,4399)),meta:{title:"计算机网络 分类",index:!1}}],["/category/%E7%BD%91%E7%BB%9C%E5%B1%82/",{loader:()=>a.e(9809).then(a.bind(a,90)),meta:{title:"网络层 分类",index:!1}}],["/category/%E4%BC%A0%E8%BE%93%E5%B1%82/",{loader:()=>a.e(9377).then(a.bind(a,739)),meta:{title:"传输层 分类",index:!1}}],["/category/%E6%A6%82%E8%BF%B0/",{loader:()=>a.e(8822).then(a.bind(a,925)),meta:{title:"概述 分类",index:!1}}],["/category/tcp/",{loader:()=>a.e(8303).then(a.bind(a,1552)),meta:{title:"TCP 分类",index:!1}}],["/category/udp/",{loader:()=>a.e(4479).then(a.bind(a,246)),meta:{title:"UDP 分类",index:!1}}],["/tag/",{loader:()=>a.e(1797).then(a.bind(a,951)),meta:{title:"标签",index:!1}}],["/tag/%E8%B5%B0%E8%BF%9B%E9%A1%B9%E7%9B%AE/",{loader:()=>a.e(2848).then(a.bind(a,8245)),meta:{title:"标签: 走进项目",index:!1}}],["/tag/o(n)~/",{loader:()=>a.e(5218).then(a.bind(a,3890)),meta:{title:"标签: O(n)~",index:!1}}],["/article/",{loader:()=>a.e(7511).then(a.bind(a,2772)),meta:{title:"文章",index:!1}}],["/star/",{loader:()=>a.e(7199).then(a.bind(a,353)),meta:{title:"星标",index:!1}}],["/timeline/",{loader:()=>a.e(5464).then(a.bind(a,4695)),meta:{title:"时间轴",index:!1}}]])},8761:(e,t,a)=>{a.d(t,{U:()=>s});const s=JSON.parse('{"base":"/","lang":"zh-CN","title":"Java咖啡馆","description":"热爱技术、享受生活","head":[["link",{"rel":"icon","href":"/favicon.ico"}],["meta",{"name":"baidu-site-verification","content":"codeva-EW7fPgf7Zs"}]],"locales":{}}')}},e=>{e.O(0,[5712,1935],(()=>e(e.s=8731))),e.O()}]);