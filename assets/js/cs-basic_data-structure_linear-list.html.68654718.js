"use strict";(self.webpackChunktechnology_life_blog=self.webpackChunktechnology_life_blog||[]).push([[355],{5287:(s,a,n)=>{n.r(a),n.d(a,{comp:()=>i,data:()=>l});var t=n(641);const e={},i=(0,n(6262).A)(e,[["render",function(s,a){return(0,t.uX)(),(0,t.CE)("div",null,a[0]||(a[0]=[(0,t.Fv)('<h2 id="线性表的定义" tabindex="-1"><a class="header-anchor" href="#线性表的定义"><span>线性表的定义</span></a></h2><blockquote><p>线性表是具有<strong>相同数据类型</strong>的n（n &gt;= 0）个数据元素的<strong>有限序列</strong>，其中n为表长，当n = 0时线性表是一个空表。若使用L命名线性表，则表示为：<br><strong>L = (a1, a2, ..., an)</strong></p></blockquote><p>重要的是有限个且类型相同。我们可以知道线性表有一下的特性：</p><ul><li>元素类型相同。</li><li>个数有限。</li><li>除了第一个元素，其余每个元素都有一个直接前驱。</li><li>除了最后一个元素，其余每个元素都有一个直接后继。</li></ul><p>线性表只是一种<strong>逻辑结构</strong>，表示的是元素之间是“挨着”的关系，它有不同的物理实现方式（顺序表、链表）。</p><h2 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作"><span>基本操作</span></a></h2><p>一般来说，学习了一个数据结构的结构后，就需要学习在这个结构上我们可以进行的操作。在这里学习的线性表具有的操作有：</p><ul><li>初始化：InitList()</li><li>求表长：Length()</li><li>按位插入：ListInsert(Element *head, int val, int location)<br> 等等<br> 这些操作知道就可以了，考试出题是让我们进行实现的，不是让我们默写的。</li></ul><h2 id="顺序表" tabindex="-1"><a class="header-anchor" href="#顺序表"><span>顺序表</span></a></h2><p>在上面我们进行了定义线性表，我们知道其是一种逻辑结构，具体的实现有两种。</p><p>这里的顺序表就是其中一种。<strong>顺序表是采用顺序存储的，也就是分配了一块连续的物理地址用于存储线性表中的数据元素。使其不仅在逻辑上连续，在物理层面上仍然连续。</strong></p><p>由此我们可以看出，如果知道一个顺序表的起始地址和要找的次序，我们可以直接找出该次序上的元素。这就是C语言中的数组呀！</p><p>如：一个数组arr = [12, 34, 13, 43]，我们要求这个数组上第2个元素，可以直接<code>printf(&quot;%d&quot;, arr[1]);</code>。</p><div class="hint-container tip"><p class="hint-container-title">有点不对劲</p><p>上面求的不是第二个元素吗？为什么使用的是<code>printf(&quot;%d&quot;, arr[1]);</code>呀？</p><p>这里就需要说明一下：数组上元素对应的位置称为索引，而索引是从0开始的，故求的是第二个元素，采用的却是<code>printf(&quot;%d&quot;, arr[1]);</code>。</p></div><h3 id="顺序表的优点和缺点" tabindex="-1"><a class="header-anchor" href="#顺序表的优点和缺点"><span>顺序表的优点和缺点</span></a></h3><p>我们为什么会采用顺序表实现线性表呢？肯定是需要它给我们带来的优势撒！那么它有什么优势呢？如下：</p><ul><li>随机访问：一个数组，无论我们想访问第1个元素还是10000个元素，访问的时间复杂度都是O(1)。</li><li>存储密度高：除了要存储的数据没有其他的无用信息。<br><strong>除了优点，还有以下缺点：</strong></li><li>插入、删除需要移动大量元素：在一个具有n个元素的数组中删除第一个元素需要将后面的n - 1个元素都向前移动，十分的不方便。平均也要移动<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac><mtext>个元素</mtext></mrow><annotation encoding="application/x-tex">\\frac{n}{2}个元素</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord cjk_fallback">个元素</span></span></span></span></li><li>分配不方便：因为需要一段连续的地址，如果计算机中没有的话，就不会进行分配，非常难受。</li></ul><h2 id="链表" tabindex="-1"><a class="header-anchor" href="#链表"><span>链表</span></a></h2><p>这是线性表的另一种实现方式，采用一个一个的节点表示并通过指针连接。</p><p><strong>节点的表示为：<br> +-------+------+<br> | data | next |<br> +-------+------+</strong><br> 使用C语言表示的结构体为（类型指明为具体的int）：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Node {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">next;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} Node;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>next为指向下一个Node的指针，通过这个指针就可以找到与其紧挨着的元素了。就像一群人，两两之间使用一条绳子进行联系，这里的指针也起到相同的作用。</p><p>使用链表的好处在哪里呢？显而易见这个和顺序表是互补的。</p><ul><li>便于插入和删除：想要插入一个node的话，我们直接改变next的指向就行了，不用再移动大量的元素。</li><li>不再需要连续的地址块：此时的联系不是通过物理上的“挨着”实现的，而是采用“绳子”的形式。<br><strong>那缺点呢？</strong></li><li>不再能随机存储：因为我们是不知道每个node的详细地址的，所以只能通过next去找寻。</li><li>存储密度低：一个node除了要存储data之外还要额外存储一个next。</li></ul><h2 id="顺序表和链表之间的差别" tabindex="-1"><a class="header-anchor" href="#顺序表和链表之间的差别"><span>顺序表和链表之间的差别</span></a></h2><p>根据上面顺序表和链表的意义可以知道：<br> 链表更加灵活不需要分配一段连续的地址块并且在插入和删除时很方便但也会导致访问元素很困难（只能一次一次的遍历）；顺序表因为是连续的所以可以轻松的访问任意一个元素但这也导致灵活度的缺失。</p><p>所以在一些插入、删除行为非常频繁的场景下可以使用链表，而在访问元素次数多的场景下可以使用顺序表！</p><h2 id="额外的补充" tabindex="-1"><a class="header-anchor" href="#额外的补充"><span>额外的补充</span></a></h2><p>在真实的场景中链表真的常用吗？我们可以思考一个问题，如果一个数组在移动大量的元素的情况下使用的时间比链表修改指针的时间更少的话，我们为什么要使用链表呢？</p><p>因为数组的每个元素我们都要随机访问，所以在插入时可以直接开始移动元素。而链表想要插入元素首先得遍历到要插入位置的前一个节点。在这里的操作中，遍历需花费的时间是占大头的，反而多次的修改所需的时间是更少的。</p><p>就连Java中创造LinkList的作者都明确地说了“他自己从不使用LinkList”。</p><figure><img src="https://cdn.nlark.com/yuque/0/2025/png/48073730/1741161112457-ab49679b-0e84-4270-bb9a-52c76f5fce4f.png" alt="图片为证" tabindex="0" loading="lazy"><figcaption>图片为证</figcaption></figure><p>ok，我们来做一个实验：</p>',33)]))}]]),l=JSON.parse('{"path":"/cs-basic/data-structure/linear-list.html","title":"线性表","lang":"zh-CN","frontmatter":{"title":"线性表","icon":"water","categories":["408","数据结构","线性结构"],"description":"线性表的定义 线性表是具有相同数据类型的n（n >= 0）个数据元素的有限序列，其中n为表长，当n = 0时线性表是一个空表。若使用L命名线性表，则表示为： L = (a1, a2, ..., an) 重要的是有限个且类型相同。我们可以知道线性表有一下的特性： 元素类型相同。 个数有限。 除了第一个元素，其余每个元素都有一个直接前驱。 除了最后一个元素...","head":[["meta",{"property":"og:url","content":"https://github.com/amatureemoprince/TechnologyAndLife/cs-basic/data-structure/linear-list.html"}],["meta",{"property":"og:site_name","content":"Java咖啡馆"}],["meta",{"property":"og:title","content":"线性表"}],["meta",{"property":"og:description","content":"线性表的定义 线性表是具有相同数据类型的n（n >= 0）个数据元素的有限序列，其中n为表长，当n = 0时线性表是一个空表。若使用L命名线性表，则表示为： L = (a1, a2, ..., an) 重要的是有限个且类型相同。我们可以知道线性表有一下的特性： 元素类型相同。 个数有限。 除了第一个元素，其余每个元素都有一个直接前驱。 除了最后一个元素..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.nlark.com/yuque/0/2025/png/48073730/1741161112457-ab49679b-0e84-4270-bb9a-52c76f5fce4f.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-05T08:02:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-05T08:02:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线性表\\",\\"image\\":[\\"https://cdn.nlark.com/yuque/0/2025/png/48073730/1741161112457-ab49679b-0e84-4270-bb9a-52c76f5fce4f.png\\"],\\"dateModified\\":\\"2025-03-05T08:02:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"阿杰 like coding bug ❥\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"git":{"createdTime":1740981411000,"updatedTime":1741161763000,"contributors":[{"name":"lj","username":"lj","email":"2069057986@qq.com","commits":3,"url":"https://github.com/lj"}]},"readingTime":{"minutes":4.95,"words":1486},"filePathRelative":"cs-basic/data-structure/linear-list.md","localizedDate":"2025年3月3日","excerpt":"<h2>线性表的定义</h2>\\n<blockquote>\\n<p>线性表是具有<strong>相同数据类型</strong>的n（n &gt;= 0）个数据元素的<strong>有限序列</strong>，其中n为表长，当n = 0时线性表是一个空表。若使用L命名线性表，则表示为：<br>\\n<strong>L = (a1, a2, ..., an)</strong></p>\\n</blockquote>\\n<p>重要的是有限个且类型相同。我们可以知道线性表有一下的特性：</p>\\n<ul>\\n<li>元素类型相同。</li>\\n<li>个数有限。</li>\\n<li>除了第一个元素，其余每个元素都有一个直接前驱。</li>\\n<li>除了最后一个元素，其余每个元素都有一个直接后继。</li>\\n</ul>","autoDesc":true}')},6262:(s,a)=>{a.A=(s,a)=>{const n=s.__vccOpts||s;for(const[s,t]of a)n[s]=t;return n}}}]);