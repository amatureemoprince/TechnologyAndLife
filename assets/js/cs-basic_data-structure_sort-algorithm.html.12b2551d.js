"use strict";(self.webpackChunktechnology_life_blog=self.webpackChunktechnology_life_blog||[]).push([[8607],{2321:(a,e,p)=>{p.r(e),p.d(e,{comp:()=>i,data:()=>s});var t=p(641);const n={},i=(0,p(6262).A)(n,[["render",function(a,e){return(0,t.uX)(),(0,t.CE)("div",null,e[0]||(e[0]=[(0,t.Fv)('<p>默认以下的排序代码中元素都是整数数值且目的是进行升序排序。</p><h2 id="排序的概念" tabindex="-1"><a class="header-anchor" href="#排序的概念"><span>排序的概念</span></a></h2><p>排序：重新排列表中的元素，使表中的元素满足按关键字有序的过程。</p><p>也就是说对应表中输入 n 个不管是否有序的记录（每个记录表示用于排序的标志称为关键字），在输出时表中为 n 个有序的记录。</p><p>在讨论排序算法时，有一个很重要的性质：该算法是否稳定！</p><p>那么满足什么条件才能说改算法是稳定的呢？</p><p>若待排序表中有两个元素 Ri 和 Rj，其对应的关键字相同，且 Ri 排在 Rj 的前面，若在使用了某个排序算法后，Ri 仍然排在 Rj 的前面，那么就称该排序算法是稳定的，否则不稳定。</p><hr><p>排序算法大多都是基于比较的，但是并不是所有排序算法都是基于比较的！比如：基数排序（这是一种十分有意思的排序算法）</p><p>我们要清晰地意识到：每种排序算法都有各自的优点，不是哪种排序算法就一定强于另一种排序算法，我们要具体情况具体分析！在实际解决问题也是这样，所以才提出了那么多种技术和框架，我们的世界是一个巨大的权衡！</p><h2 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序"><span>插入排序</span></a></h2><p>插入排序十分的直观，是一种“耿直”的排序算法。</p><p>其基本的思想是：每次将一个待排序的记录按照关键字大小插入到前面已经排好序的子序列中，直到所有的记录全部插入完成。</p><h3 id="直接插入排序" tabindex="-1"><a class="header-anchor" href="#直接插入排序"><span>直接插入排序</span></a></h3><p>顾名思义，就是“直接”，不管那么多弯弯绕绕。</p><p>每次从待排序记录中选择一个最小关键字插入到前面排好序的序列中！</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> direct_insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="折半插入排序" tabindex="-1"><a class="header-anchor" href="#折半插入排序"><span>折半插入排序</span></a></h3><h3 id="希尔排序" tabindex="-1"><a class="header-anchor" href="#希尔排序"><span>希尔排序</span></a></h3><h2 id="选择排序" tabindex="-1"><a class="header-anchor" href="#选择排序"><span>选择排序</span></a></h2><h3 id="简单选择排序" tabindex="-1"><a class="header-anchor" href="#简单选择排序"><span>简单选择排序</span></a></h3><h3 id="堆排序" tabindex="-1"><a class="header-anchor" href="#堆排序"><span>堆排序</span></a></h3><h2 id="交换排序" tabindex="-1"><a class="header-anchor" href="#交换排序"><span>交换排序</span></a></h2><h3 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序"><span>冒泡排序</span></a></h3><h3 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序"><span>快速排序</span></a></h3><h2 id="归并排序" tabindex="-1"><a class="header-anchor" href="#归并排序"><span>归并排序</span></a></h2><h2 id="计数排序" tabindex="-1"><a class="header-anchor" href="#计数排序"><span>计数排序</span></a></h2><h2 id="基数排序" tabindex="-1"><a class="header-anchor" href="#基数排序"><span>基数排序</span></a></h2><h2 id="外部排序" tabindex="-1"><a class="header-anchor" href="#外部排序"><span>外部排序</span></a></h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p>之前学习的排序算法，都是基于内存的（在内存里面进行的），外部排序算法是将外存中的数据进行排序！</p><p>由于我们知道存储在外存的数据量通常是很大的，所以不可能像内部排序一样将数据全部放入内存再进行排序。</p><p>引入外部排序的定义：</p><p>外部排序：将待排序的记录存储在外存上，排序时再把数据一部分一部分地调入内存中进行排序，在排序过长中需要多次进行内存和外存之间的交换。</p><p>我们知道内存的运行速度是非常快的，所以在外部排序中，影响整体的排序时间是进行 <strong>IO 操作</strong>。就是从外存读入到内存，再从内存写入到外存。</p><h3 id="具体操作" tabindex="-1"><a class="header-anchor" href="#具体操作"><span>具体操作</span></a></h3><p>如何对外存的大文件进行排序呢？下面来解答：</p><hr><p>第一：需要根据内存的缓冲区大小，将外存中的大文件分成 n 份长度为 l 的子文件，依次读入读入内存，然后使用内部排序算法对其进行排序，并将排完序的有序子文件写入到外存，这些有序子文件成为<strong>归并段或顺串</strong>。</p><p>第二：对归并段进行归并，这样就可以将多个归并段合为一个归并段了，直到整个文件有序。</p><hr><figure><img src="https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743304375277-fd2674f2-b7e4-439e-a791-29e51e4a06a6.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>根据内存中的输入缓存区大小将外存的文件划分为 n 块，这里采用的是二路归并，所以有两个输入缓存区，然后读入外存文件的两个块，分别为：块 1（4、1、6）和块 2（3、2、7），分别在输入缓存 1、2 中等待排序。根据归并排序将这两个块内部进行排序，再写入外存，这样外存中的每个块都是有序的了。</p><p>选择两个块进行排序合为一个有序的块，整体变为 n/2 个归并段，以此类推，就可以将整个外部文件变为有序的了。</p><hr><p>因为分配的内存大小有限，故不能将两个有序段和归并结果一同存储在内存中，所以是需要不断地读入、写出数据，而大量的 IO 操作会带来大量的时间消耗。结合上面的其他时间消耗可得：</p><p><strong>外部排序时间 = 内部排序时间 + 外部数据读入/写出 时间 + 内部归并时</strong></p><p><strong>显然的，外部数据 IO 操作是最消耗时间的，故应该着手降低 IO 次数，才能改善外部排序时间。</strong></p><p>思考一下，怎样可以减少 IO 操作次数呢？</p><p>设：有一个含有 2000 个记录的文件，每个块可以存放 125 个记录。（每个块中都是有序的了）</p><p>采用二路归并算法</p><p>因为读入写入的操作是以“块”为单位的，所以需要 16 次写入排好序后再进行 16 次写出。</p><p>也就是依次归并操作就需要 32 次 IO 操作，不管是归并段为多大，都是一样的，因为每次归并操作都会将每个块进行读入和写出。</p><p>根据这个可以画出一个二叉树：</p><hr><figure><img src="https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743307005556-61468bfd-9c69-46c2-b750-f5a95a57dba6.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>R1、R2...表示的是有序块，R1&#39;表示通过 R1、R2 归并后得到的有序段，其余的以此类推则可。</p><p>显然是需要内部排序+归并 3 次才能有序。故需要 32 + 32 x 3 次 IO 操作。每层到每层之间需要一次归并。</p><hr><p>如何优化呢？显然只要该树的层数变少了则可以减少归并操作，怎样变少呢？因为块数是一样的（叶子结点数一样）故只要树的阶数变大则可以将层数变小！</p><p>换句话说就是改 2 路归并为更多路归并，如 4 路归并。</p><p>这样树的高度变为 3，则只需要 32 + 32 x 2 次 IO 操作了，如下：</p><hr><figure><img src="https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743307596785-0f48049d-12b5-4280-aa5e-15921b4a575a.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><hr><p>由此可知：若有 r 个初始归并段（排好序），采用 k 路归并则有：</p><p><strong>树的高度 - 1 =</strong> <img src="https://cdn.nlark.com/yuque/__latex/03c090e28f82e8b72b728c5f64fe7379.svg" alt="img" loading="lazy"><strong>= 归并次数 = S</strong></p><p>但是我们需要注意：如果分配的内存大小是一定的，采用的 k 路归并，k 越大，则在内部进行 k 路归并排序的时间就需要更多，所以需要平衡这两者之间的关系。</p><p>推导：</p><p>采用 k 路归并，需要比较 k - 1 次才能得到一个最小的元素，而在每次归并的元素个数为 n，所以每趟需要做(n - 1)(k - 1)次比较。</p><p>则总的比较次数为：S(n - 1)(k - 1)</p><figure><img src="https://cdn.nlark.com/yuque/__latex/57f229bd2f35683a87153b11490119f8.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><hr><p>严谨地推论可以得知在 k 增大到一定时候，会将因 k 增大而减少外部访问次数的收益抵消掉。因此，我们不能使用普通的内部排序算法！</p><p>在这里引入<strong>败者树。</strong></p><h3 id="败者树" tabindex="-1"><a class="header-anchor" href="#败者树"><span>败者树</span></a></h3><p>其实这个数据结构在日常生活中十分常见，在比赛时，先进行一轮 PK，在有额外的选手参与进来时，不再重新 PK，而是安排从胜者的位置中进行 PK。这样在这后面比较的效率会大大提升。</p><p>败者树是树形选择排序的一种变体，可视为一颗完全二叉树，内部节点中保留失败者。</p><p>这里的外部排序规定的是：数值大的为失败者，小的为胜利者。因为我们需要的从小到大排序！最后的胜利者就作为最小值写到输出缓存区中，直到输出缓存区中满了一个块的大小就写入到外存的一个块中。</p><p>举个例子：</p><hr><figure><img src="https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743320652772-a8b12d56-9e76-45d7-b59c-ef74667e5e09.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如上：败者树的叶子结点个数 k，就为 k 路归并。</p><p>显然的，采用 k 路归并的败者树深度为：<img src="https://cdn.nlark.com/yuque/__latex/de4f9ee6bc2132d029693cadd9a312fa.svg" alt="img" loading="lazy">（不包含胜者结点），进行的比较的次数为⌈log_2k⌉</p><p>故进行的比较的总次数为：S(n - 1)⌈log_2k⌉</p><p>化简为：<img src="https://cdn.nlark.com/yuque/__latex/e3d969e49d4aa2e8aff7099a91db18a6.svg" alt="img" loading="lazy"></p><hr><p>接着上面说的增加 k 就可以减少 IO 操作，引入败者树后比较次数就和 k 无关了，只要内存空间允许，增大归并路数 k，就可以有效地减少 IO 操作，从而提高外部排序的速度！</p><p>但是这是基于内存空间足够大的情况，如果内存空间一定，增加 k，则每块的大小会减少，从而每次归并需要的 IO 操作又会增多，唉，有够麻烦的呀！！！（计算机是这样的😋）</p><hr><p>根据上面的公式</p><p>S = <img src="https://cdn.nlark.com/yuque/__latex/741c36d5d19ac7c970b06d343cee2e47.svg" alt="img" loading="lazy"></p><p>知道：减少外部排序的时间除了增加 k，还可以减少 r 吧！好像发现新大陆。</p><p>根据这个思路就引出了一个新的解决方案：置换-选择排序</p><h3 id="置换-选择排序" tabindex="-1"><a class="header-anchor" href="#置换-选择排序"><span>置换-选择排序</span></a></h3><p>之前分配的归并段每一段都是相等的，初始归并段总数 r 为<img src="https://cdn.nlark.com/yuque/__latex/691870d5e9fb14918fd8a2e6ccf7749e.svg" alt="img" loading="lazy"></p><p>l 依赖于内部排序时可用的内存工作区（WA）大小，为了减少 r，所以使用新的方法来产生更长的归并段！</p><p>令其使用原本大小的 WA 可以构造更长的初始归并段（越长当然个数越小咯）</p><hr><p>其实方法非常的简单：</p><p>假设 WA 可以存储 3 个记录，然后外部待排序存储文件分别为：4,6,9,7,13,11,16,14,10。</p><p>还有一个变量 MINIMAX 用于存储 3 个记录中的最小值</p><p>首先进入 3 个：4,6,9</p><p>找出最小的 4 加入归并段 1 并令 MINIMAX 为 4 再进入 7</p><p>此时 WA 中的最小值为 6 且大于 MINIMAX 故可以加入到归并段 1 再进入 13</p><p>找出最小的 7，大于 MINIMAX 故可以加入归并段 1 并令 MINIMAX 为 7 再进入 11</p><p>......</p><p>此时 WA 中为 14,16，MINIMAX 为 13，进入 10</p><p>因为 10 小于 MINIMAX 故不能进入归并段 1，只能再开一个归并段 2，此时归并段 1 就已经处理完了。</p><p>依次类推，直到所有外部文件都处理完毕。</p><p>在选择 MINIMAX 时是采用的<strong>败者树</strong>实现的</p><p><a href="https://player.bilibili.com/player.html?bvid=BV1b7411N798&amp;p=103&amp;page=103&amp;autoplay=0" target="_blank" rel="noopener noreferrer">https://player.bilibili.com/player.html?bvid=BV1b7411N798&amp;p=103&amp;page=103&amp;autoplay=0</a></p><hr><h3 id="最佳归并树" tabindex="-1"><a class="header-anchor" href="#最佳归并树"><span>最佳归并树</span></a></h3><p>归并树：各叶结点表示一个初始归并段，上面的权值表示该归并段的长度，叶结点到根节点的路径长度表示参与归并的趟数，各非叶子结点代表归并成的新归并段。</p><p>使用置换-选择排序后，得到的初始归并段长度是不一致的。</p><p>而这个最佳归并树就是为了解决<strong>怎样组织长度不一致的初始归并段的归并顺序，使其 IO 次数最少</strong>。</p><p>在归并树中该树的 WPL 乘以 2 就为对应初始段的 IO 操作次数</p><hr><p>要使得归并树为一个最佳归并树，就要使的 WPL 最小，显然的，此时的最佳归并树也就是一个<strong>哈夫曼树！</strong></p><p>那就要构造一个哈夫曼树，大体和之前构造方法一致，但是需要注意一下地方。</p><ul><li>因为该“哈夫曼树”的阶数是有采用的 k 路归并决定的，所以可以是 k 阶</li><li>如果在某次归并中不是使用的 k 路归并则出错</li></ul><p>最后一个需要注意的地方进行说明：</p><p><strong>由归并树构成的哈夫曼树一定要是一个严格 k 叉树。</strong></p><p>之所以会出现某次归并不是 k 路归并，就是因为该归并树的结点数不够形成一颗完全 k 叉树。为了解决这个问题就需要添加“虚段”，也就是权值为 0 的初始段！</p><p>如何添加“虚段”呢？如下：</p><hr><p>设：度为 0 的结点有<img src="https://cdn.nlark.com/yuque/__latex/fae17384674b5ec0640c50049ea43076.svg" alt="img" loading="lazy">个，度为 k 的结点有<img src="https://cdn.nlark.com/yuque/__latex/d150ef9da5e420d7b49c1459bdc3bfe2.svg" alt="img" loading="lazy">个，归并树的结点数总共有<img src="https://cdn.nlark.com/yuque/__latex/53bd15bd9229cd48a311be75b1a51db2.svg" alt="img" loading="lazy">个，则有：</p><figure><img src="https://cdn.nlark.com/yuque/__latex/a0cabecbbf69c007f2545a9bf3237c19.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://cdn.nlark.com/yuque/__latex/a0e8bf6b5d4c27d4152e404a663f6f3c.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由此可知：对于严格 k 叉树有：<img src="https://cdn.nlark.com/yuque/__latex/128ae40dda374b9e9b796365c3b811fd.svg" alt="img" loading="lazy"></p><p>故有<img src="https://cdn.nlark.com/yuque/__latex/a39427813efc38060687d7a733dee9df.svg" alt="img" loading="lazy"></p><p>若 <img src="https://cdn.nlark.com/yuque/__latex/ae2d1e7c624621f31fa05d0a62fd5897.svg" alt="img" loading="lazy">= 0 则表示 <img src="https://cdn.nlark.com/yuque/__latex/6a856162e54b4148ca4a773f3b2ec9e0.svg" alt="img" loading="lazy">个叶子结点可以构成一颗 k 叉归并树，此时内部结点有<img src="https://cdn.nlark.com/yuque/__latex/d150ef9da5e420d7b49c1459bdc3bfe2.svg" alt="img" loading="lazy">个。</p><p>若<img src="https://cdn.nlark.com/yuque/__latex/ae2d1e7c624621f31fa05d0a62fd5897.svg" alt="img" loading="lazy"> = u 则表示 <img src="https://cdn.nlark.com/yuque/__latex/6a856162e54b4148ca4a773f3b2ec9e0.svg" alt="img" loading="lazy">个叶子结点不能构成一颗 k 叉归并树，其中有 u 个多余，不能包含在 k 叉归并树中。为了构造包含所有叶子结点的 k 叉归并树，需要在添加 <img src="https://cdn.nlark.com/yuque/__latex/cb5a760ed9273fe4190f6ef40702aa88.svg" alt="img" loading="lazy">个“虚段”，再进行构造。</p><hr><p>举个例子：</p><p>如果有初始归并段为：2、3、6、9、12、17、18、24 对其进行 3 路归并</p><ol><li>不采用“虚段”</li></ol><figure><img src="https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743328407349-8c9b255a-9e96-40e5-9b90-4ceba5a05677.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这样做法在 32 和 59 这一层就不是采用的 3 路归并，就是错误的！</p><p>此时的 WPL 为 193</p><ol><li>采用“虚段”</li></ol><figure><img src="https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743328553303-f2205cf1-cf6d-45e7-bfb0-038895772daa.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因为总的初始归并段数为 8，采用 3 路归并，根据上面的公式得余数为 1</p><p>故需要添加 3 - 1 - 1 个“虚段”</p><p>此时 WPL 为 139</p><p>显然比上面不添加“虚段”的 WPL 小！</p><h2 id="排序算法的分析和应用" tabindex="-1"><a class="header-anchor" href="#排序算法的分析和应用"><span>排序算法的分析和应用</span></a></h2>',148)]))}]]),s=JSON.parse('{"path":"/cs-basic/data-structure/sort-algorithm.html","title":"","lang":"zh-CN","frontmatter":{"description":"默认以下的排序代码中元素都是整数数值且目的是进行升序排序。 排序的概念 排序：重新排列表中的元素，使表中的元素满足按关键字有序的过程。 也就是说对应表中输入 n 个不管是否有序的记录（每个记录表示用于排序的标志称为关键字），在输出时表中为 n 个有序的记录。 在讨论排序算法时，有一个很重要的性质：该算法是否稳定！ 那么满足什么条件才能说改算法是稳定的呢...","head":[["meta",{"property":"og:url","content":"https://github.com/amatureemoprince/cs-basic/data-structure/sort-algorithm.html"}],["meta",{"property":"og:site_name","content":"Java咖啡馆"}],["meta",{"property":"og:description","content":"默认以下的排序代码中元素都是整数数值且目的是进行升序排序。 排序的概念 排序：重新排列表中的元素，使表中的元素满足按关键字有序的过程。 也就是说对应表中输入 n 个不管是否有序的记录（每个记录表示用于排序的标志称为关键字），在输出时表中为 n 个有序的记录。 在讨论排序算法时，有一个很重要的性质：该算法是否稳定！ 那么满足什么条件才能说改算法是稳定的呢..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743304375277-fd2674f2-b7e4-439e-a791-29e51e4a06a6.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T12:02:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T12:02:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743304375277-fd2674f2-b7e4-439e-a791-29e51e4a06a6.jpeg\\",\\"https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743307005556-61468bfd-9c69-46c2-b750-f5a95a57dba6.jpeg\\",\\"https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743307596785-0f48049d-12b5-4280-aa5e-15921b4a575a.jpeg\\",\\"https://cdn.nlark.com/yuque/__latex/03c090e28f82e8b72b728c5f64fe7379.svg\\",\\"https://cdn.nlark.com/yuque/__latex/57f229bd2f35683a87153b11490119f8.svg\\",\\"https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743320652772-a8b12d56-9e76-45d7-b59c-ef74667e5e09.jpeg\\",\\"https://cdn.nlark.com/yuque/__latex/de4f9ee6bc2132d029693cadd9a312fa.svg\\",\\"https://cdn.nlark.com/yuque/__latex/e3d969e49d4aa2e8aff7099a91db18a6.svg\\",\\"https://cdn.nlark.com/yuque/__latex/741c36d5d19ac7c970b06d343cee2e47.svg\\",\\"https://cdn.nlark.com/yuque/__latex/691870d5e9fb14918fd8a2e6ccf7749e.svg\\",\\"https://cdn.nlark.com/yuque/__latex/fae17384674b5ec0640c50049ea43076.svg\\",\\"https://cdn.nlark.com/yuque/__latex/d150ef9da5e420d7b49c1459bdc3bfe2.svg\\",\\"https://cdn.nlark.com/yuque/__latex/53bd15bd9229cd48a311be75b1a51db2.svg\\",\\"https://cdn.nlark.com/yuque/__latex/a0cabecbbf69c007f2545a9bf3237c19.svg\\",\\"https://cdn.nlark.com/yuque/__latex/a0e8bf6b5d4c27d4152e404a663f6f3c.svg\\",\\"https://cdn.nlark.com/yuque/__latex/128ae40dda374b9e9b796365c3b811fd.svg\\",\\"https://cdn.nlark.com/yuque/__latex/a39427813efc38060687d7a733dee9df.svg\\",\\"https://cdn.nlark.com/yuque/__latex/ae2d1e7c624621f31fa05d0a62fd5897.svg\\",\\"https://cdn.nlark.com/yuque/__latex/6a856162e54b4148ca4a773f3b2ec9e0.svg\\",\\"https://cdn.nlark.com/yuque/__latex/d150ef9da5e420d7b49c1459bdc3bfe2.svg\\",\\"https://cdn.nlark.com/yuque/__latex/ae2d1e7c624621f31fa05d0a62fd5897.svg\\",\\"https://cdn.nlark.com/yuque/__latex/6a856162e54b4148ca4a773f3b2ec9e0.svg\\",\\"https://cdn.nlark.com/yuque/__latex/cb5a760ed9273fe4190f6ef40702aa88.svg\\",\\"https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743328407349-8c9b255a-9e96-40e5-9b90-4ceba5a05677.jpeg\\",\\"https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743328553303-f2205cf1-cf6d-45e7-bfb0-038895772daa.jpeg\\"],\\"dateModified\\":\\"2025-03-30T12:02:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"阿杰 like coding bug ❥\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"git":{"createdTime":1740981411000,"updatedTime":1743336152000,"contributors":[{"name":"lj","username":"lj","email":"2069057986@qq.com","commits":5,"url":"https://github.com/lj"}]},"readingTime":{"minutes":11.35,"words":3406},"filePathRelative":"cs-basic/data-structure/sort-algorithm.md","localizedDate":"2025年3月3日","excerpt":"<p>默认以下的排序代码中元素都是整数数值且目的是进行升序排序。</p>\\n<h2>排序的概念</h2>\\n<p>排序：重新排列表中的元素，使表中的元素满足按关键字有序的过程。</p>\\n<p>也就是说对应表中输入 n 个不管是否有序的记录（每个记录表示用于排序的标志称为关键字），在输出时表中为 n 个有序的记录。</p>\\n<p>在讨论排序算法时，有一个很重要的性质：该算法是否稳定！</p>\\n<p>那么满足什么条件才能说改算法是稳定的呢？</p>\\n<p>若待排序表中有两个元素 Ri 和 Rj，其对应的关键字相同，且 Ri 排在 Rj 的前面，若在使用了某个排序算法后，Ri 仍然排在 Rj 的前面，那么就称该排序算法是稳定的，否则不稳定。</p>","autoDesc":true}')},6262:(a,e)=>{e.A=(a,e)=>{const p=a.__vccOpts||a;for(const[a,t]of e)p[a]=t;return p}}}]);