"use strict";(self.webpackChunktechnology_life_blog=self.webpackChunktechnology_life_blog||[]).push([[7327],{4523:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>h});var n=a(641);const l={},t=(0,a(6262).A)(l,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<p>下面代码和示例都默认使用整数类型。</p><hr><h2 id="查找的概念" tabindex="-1"><a class="header-anchor" href="#查找的概念"><span>查找的概念</span></a></h2><p><strong>查找</strong>：在数据集合中寻找满足某种条件的数据元素的过程称为查找。</p><p>查找的结果只能有两种，分别为<strong>查找成功</strong>和<strong>查找失败</strong>，前者表示在查找表中寻找到了满足条件的元素，后者表示没有在查找表中寻找到满足条件的元素。</p><p>这里出现的<strong>查找表</strong>就是<strong>用于查找的数据集合</strong>，其由同一类型的元素组成。</p><p>查找表有两种分类分别为：</p><ul><li>静态查找表：对查找表只有查找操作，不存在修改元素的操作。</li><li>动态查找表：对查找表有动态地插入和删除。</li></ul><p>适合静态查找表的查找算法有：折半查找、顺序查找、散列查找等。</p><p>适合动态查找表的查找算法有：二叉排序树的查找、散列查找等。</p><p>适合静态和动态查找表中都存在散列查找，这是因为其有个<strong>装载因子</strong>的概念，当某刻的装填因子大于规定的阈值时，会对散列表进行扩容操作！</p><p>我们查找是根据关键字来进行查找的，那什么是关键字呢？</p><p><strong>关键字</strong>：数据元素中唯一标识该元素的某个数据项的值。</p><p>举个例子：以全体中国人做例子，什么数据项可以作为一个中国人的唯一标识呀？肯定就是身份证号撒。没错，身份证号就可以作为查找某个人的关键字！</p><p>在查找算法这节中，有个<strong>评判查找算法效率的重要指标</strong>，这节的重点也是它！它就是<strong>平均查找长度</strong>。</p><p><strong>平均查找长度</strong>：在查找过程中，一次查找的长度是指一次查找某个元素需要比较的关键字次数，而平均查找长度则是所有查找过程中进行关键字比较次数的平均次数。</p><p>其数学定义式为：</p><figure><img src="https://cdn.nlark.com/yuque/__latex/e0103d33dfc7fe71ca16501ef30d2919.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>查找表的长度为 n， 在上面<img src="https://cdn.nlark.com/yuque/__latex/60b7f8a498a516989cfb2315f66209ec.svg" alt="img" loading="lazy">的公式中，<img src="https://cdn.nlark.com/yuque/__latex/282ff0c1015821da5017765ed7c1e43c.svg" alt="img" loading="lazy">表示查找第 i 个数据元素的概率，通常认为每个元素的查找概率相同，即<img src="https://cdn.nlark.com/yuque/__latex/6d0fe423fb8807f16cd53865b40f7df7.svg" alt="img" loading="lazy">，<img src="https://cdn.nlark.com/yuque/__latex/b3e446f65eb8aeac98b741ad30fcea2e.svg" alt="img" loading="lazy">是找到第 i 个元素需要进行比较的次数。</p><hr><h2 id="顺序查找" tabindex="-1"><a class="header-anchor" href="#顺序查找"><span>顺序查找</span></a></h2><p>该查找算法又被称为“线性查找”，这个名字和之前学习的顺序存储很类似，其实其在逻辑上也是类似的。</p><p>和这个算法的名字一样“顺序（线性）”，就是从一侧到另一侧依次的查找呗！如果找到满足条件的元素则返回对应的索引，否则返回查找失败的信息，一般而言返回-1，因为索引是从 0 开始的。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sequential_search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> len; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> val){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在王道书上提到了一个哨兵，其实就是牺牲一个单位空间来替代 if 判断，这样就只需要从后往前遍历，直接返回 val 的 index 则可。其实原理都是一样的，无需纠结。</p><hr><p>平均查找长度：</p><p>查找成功：在查找表长度为 n 的情况下，查找 val 到与第 i 个元素相同时，因为有 n 个元素，故<img src="https://cdn.nlark.com/yuque/__latex/6d0fe423fb8807f16cd53865b40f7df7.svg" alt="img" loading="lazy">，比较次数<img src="https://cdn.nlark.com/yuque/__latex/475deef5404d77187e448ff8ddd324ed.svg" alt="img" loading="lazy">，故有：</p><figure><img src="https://cdn.nlark.com/yuque/__latex/f51e2121b22eebe4a5238d1f228bbb52.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>查找失败：因为查找失败只能有一次，就是遍历完所有元素都不满足条件，需要比较 n 次，故有：</p><figure><img src="https://cdn.nlark.com/yuque/__latex/4befdf8673a154ed660ab91b6b83c760.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>王道书上的<img src="https://cdn.nlark.com/yuque/__latex/c3cabf9815a3d9963d5a53b0295c85af.svg" alt="img" loading="lazy">的原因是使用了“哨兵”，有 n 个元素再加上一个“哨兵”，故需要比较 n+1 次。</p><p>顺序查找的优缺点：</p><ul><li>优点：对数据的存储形式没有要求，既可以是<strong>顺序存储</strong>又可以是<strong>链式存储</strong>，对查找表中记录的有序性也没有要求，有序无序都可以使用该算法。</li><li>缺点：当查找表中的元素个数 n 较大时，其平均查找长度较大，效率较低。</li></ul><p><strong>在这里查找每个元素的概率都是相同的，但是实际情况中更多的是概率不同，所以在遇到具体的问题还需要具体的分析！</strong></p><hr><p>上面的顺序查找是在查找表中关键字无序情况下进行的，所以查找需要遍历整个查找表。</p><p>只要使查找表中的关键字有序，则可以进行优化，提前结束遍历！</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sequential_better_search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (len </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> val </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> val </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[len </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 快速失败</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> len; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> val) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> len </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> val </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> val) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 提前终止</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>可以使用一颗判定树来描述有序线性表的查找过程。</p><p><strong>判断树</strong>：是一种用于描述查找算法执行过程的二叉树，其中每个节点代表一次<strong>关键字的比较操作</strong>，分支代表比较结果（左分支为“小于”，右分支为“大于”或“等于”），叶子节点代表查找的成功或失败。<br> 对于有序线性表的查找（如顺序查找、折半查找），判定树可以直观展示所有可能的查找路径和比较次数。</p><p>现在将对一个有序表进行查找，其形成的判定树如下：其中圆形结点表示有序表中存在的元素，矩形结点表示失败结点，其描述为不在表中数据值的集合。若找到了矩形结点则说明查找失败！</p><figure><img src="https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743515983653-08346e79-982b-42d5-8eea-1ecca15f956b.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由此可知，有序序列中的 n 个元素会将整个关键字区间划分为 n+1 个子区间，故矩形结点必有 n+1 个！</p><p>平均查找长度：</p><p>查找成功：此时查找成功和没有优化的顺序查找一样。故有：</p><figure><img src="https://cdn.nlark.com/yuque/__latex/f51e2121b22eebe4a5238d1f228bbb52.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>查找失败：因为矩形结点是虚拟的，故并不用对其进行比较，所以比较次数等于其上面的一个圆形结点的层数，查找不成功的平均长度在相等查找概率下有：</p><figure><img src="https://cdn.nlark.com/yuque/__latex/8619a6152843b1dc8c1df14e0d4bf3c8.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>只要牢记 ASL 的定义，就不会出现问题！</p><hr><h2 id="折半查找" tabindex="-1"><a class="header-anchor" href="#折半查找"><span>折半查找</span></a></h2><p>折半查找又被称为“二分查找”。要使用折半查找的话，对应的查找表必须是**有序（在这里升序）**的！</p><p>核心思想是：比较要查找的元素 val 和查找表的中间元素，若小于则到左侧寻找，若大于则到右侧寻找，往后的查找都使用这种方式进行。<strong>在取中间元素时，既可以向下取整又可以向上取整，但在每次查找过程中要相同，这在做题时需要注意</strong>。</p><p>这样的话，每比较一次就可以缩小一半的查找范围，十分的高效。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> half_search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //因为是有序的，首先过滤一遍val</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(val </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> val </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[len </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> len </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //区间可以为[low, high]或者[low, high)，这两者实现的代码有些许不同</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> low </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> high </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> len </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(low </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> high){</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //避免溢出</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mid </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> low </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (high </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> low) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[mid] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> val){</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            low </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mid </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[mid] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> val){</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            high </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mid </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[mid] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> val){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mid;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用折半查找时，查找表要满足<strong>随机存取和有序</strong>的特性！故只有顺序存储的有序线性表可以使用，而链式存储的线性表不行。</p><hr><p>该算法的<strong>判定树</strong>如下：</p><figure><img src="https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743553658951-64fe98d9-a860-4914-bce6-d0292fb4cfee.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>根据判定树进行分析 ASL：</p><p><strong>可知判定次数一定不会超过该判定树的高！</strong></p><p>在有序表中有 n 个元素和等概率的条件下，有：</p><figure><img src="https://cdn.nlark.com/yuque/__latex/7974c5becc851c07498098fe376d9dbd.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://cdn.nlark.com/yuque/__latex/44ae2cd43544c32bdf1d4e4112aaf5ff.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中，h 为树的高度。有 n 个元素的二叉树高为<img src="https://cdn.nlark.com/yuque/__latex/087934cfc0c944281f7961a06ec64c91.svg" alt="img" loading="lazy">，故折半查找的时间复杂度为：<img src="https://cdn.nlark.com/yuque/__latex/65c54415e21b8b592c65dc4cd43cbd33.svg" alt="img" loading="lazy">。</p><p>对于查找失败和查找成功的 ASL 需要根据的情况进行计算：</p><p>举个上面判定树中的例子说明：</p><figure><img src="https://cdn.nlark.com/yuque/__latex/5d1bcfa5e4c17686c70a19ca62094c46.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://cdn.nlark.com/yuque/__latex/11a20c4770780ca3d1a652a18a7b4373.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>所以在计算 ASL 时可以将其判定树画出来，问题就可以轻松解决了！</p><hr><h2 id="分块查找" tabindex="-1"><a class="header-anchor" href="#分块查找"><span>分块查找</span></a></h2><p>分块查找又被称为“索引顺序查找”。该算法吸收了折半查找和顺序查找各自的优点！<strong>既有动态结构又可以快速查找</strong>。</p><p>核心思想是：将查找表分为若干个子块，块内元素可以无序，但块间元素是有序的，即前一个块中的最大关键字小于后一个块中的最小关键字，建立一个索引表，其中存储着每个块的开始索引和对应块中的最大元素。在查找过程中，首先根据索引表查找到对应的块，然后在块中进行顺序查找或折半查找。</p><hr><figure><img src="https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743555894582-0b512579-dc43-4171-8946-779d008426fa.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>分块查找的平均查找长度为<strong>索引查找和块内查找的平均查找长度之和</strong></p><p>设：索引查找和块内查找的平均查找长度分别为<img src="https://cdn.nlark.com/yuque/__latex/daa0521f3a59730abd3a2cbcd6101576.svg" alt="img" loading="lazy">。</p><p>则有：</p><figure><img src="https://cdn.nlark.com/yuque/__latex/2a53672f3b51de6e90b890e878b30341.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们将这个公式再进行展开：</p><p>如果将长度为 n 的查找表分为 b 块，每块有 s 个记录，则有：</p><figure><img src="https://cdn.nlark.com/yuque/__latex/3b0df814ee9a55084a1cb8fd12b58e57.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>根据均值不等式可知：当<img src="https://cdn.nlark.com/yuque/__latex/5b951166ca34b3af6c4e9a3da9cc03fc.svg" alt="img" loading="lazy">时，有：<img src="https://cdn.nlark.com/yuque/__latex/034cb7d8bae5d396d5230a477bf17e04.svg" alt="img" loading="lazy">。</p><p>虽然索引表会使用额外的存储空间，但是为其带来了效率上的提升，这是典型的<strong>空间换时间</strong>！</p><hr><h2 id="树形查找" tabindex="-1"><a class="header-anchor" href="#树形查找"><span>树形查找</span></a></h2><p>树形查找：是一种基于树形数据结构实现的查找算法，它利用树的分层特性将数据组织成具有层次关系的结构，从而大幅提升查找效率（尤其是动态数据的查找、插入和删除操作）。</p><hr><h3 id="二叉排序树-bst" tabindex="-1"><a class="header-anchor" href="#二叉排序树-bst"><span>二叉排序树（BST）</span></a></h3><p>BST 存在的意义是什么？不可能平白无故地构造一个 BST 吧！我们思考一下，在之前的顺序查找过程中是属于线性的，可以归结为“一条路走到黑”，而在折半查找过程中因为每次从中间元素比较，可以构造为一颗二叉判定树，其时间复杂度被优化为<img src="https://cdn.nlark.com/yuque/__latex/65c54415e21b8b592c65dc4cd43cbd33.svg" alt="img" loading="lazy">，但是折半查找要的是查找表关键字有序，那我们可以不可以思考一下怎样可以让一个无序的查找表时间复杂度也可以被优化成<img src="https://cdn.nlark.com/yuque/__latex/65c54415e21b8b592c65dc4cd43cbd33.svg" alt="img" loading="lazy">呢？</p><p>没错，救赎之道就在这里——BST！</p><p>构造一颗 BST，就可以提高查找、删除、插入关键字的效率，而且不管这个查找表中的关键字是有序还是无序，只要构造为了一颗 BST，一切就好起来了。</p><hr><p><strong>BST 的定义</strong>：</p><p>又被称为二叉查找树，其可以是一颗空树或者具有一下特征的二叉树：</p><ul><li>若左子树非空，则左子树上所有结点的值都小于根结点的值。</li><li>若右子树非空，则右子树上所有结点的值都大于根结点的值。</li><li>左、右子树也分别是一颗 BST。</li></ul><figure><img src="https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743562715439-e846b403-d8f8-47e3-8574-14053697a66a.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因为左子树的结点值&lt;根结点值&lt;右子树结点值，故若使用中序遍历一颗 BST 可以得到一个递增的有序序列！</p><hr><p><strong>BST 的查找</strong>：<br> 因为可以视为二叉树的查找且有目标性（直到从左子树还是从右子树进行查找），可以利用递归！也可以使用迭代，在这里使用递归，因为代码简单。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//定义结构体</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bst_tree_node {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bst_tree_node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">left_child, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">right_child;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}BST_TREE_NODE;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">BST_TREE_NODE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bst_search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">BST_TREE_NODE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (root </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (val </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> bst_search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">left_child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, val);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (val </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> bst_search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">right_child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, val);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (val </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> root;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 BST 中进行查找，显然比较次数不会超过树高，和折半查找类似，但是这个树高是不能确定的！若查找表中的元素非常合适，构造的 BST 为一颗近似于完全二叉树的形式，则其时间复杂度显然为：<img src="https://cdn.nlark.com/yuque/__latex/65c54415e21b8b592c65dc4cd43cbd33.svg" alt="img" loading="lazy">，但是在某些时候，给定的查找表元素会让 BST 退化为一条链表形式，此时时间复杂度为：<img src="https://cdn.nlark.com/yuque/__latex/e65a67ac353abeeff44c359310d05c02.svg" alt="img" loading="lazy">。前者的平均查找成功长度和 <img src="https://cdn.nlark.com/yuque/__latex/3c27b30a971bc5e9f6eb5d61efe17846.svg" alt="img" loading="lazy">成比例，后者的平均查找成功长度和顺序查找的一样为<img src="https://cdn.nlark.com/yuque/__latex/935db81b0307b34fef4e68aee29c0598.svg" alt="img" loading="lazy">。</p><p>在具体的计算中可以构建好 BST 树然后根据定义进行计算则可。</p><hr><p><strong>BST 的插入</strong>：</p><p>BST 是一颗“动态”的二叉树，其特点是树形结构不是一次性形成的，而是在寻找的过程中，若树中不存在满足条件的关键字时，将该关键字插入到合适的位置。</p><p>插入的过程是：如果根为空，则直接插入；否则，给定关键字小于根结点值则插入到左子树，给定关键字大于根结点值则插入右子树，新插入的结点一定是<strong>叶子结点</strong>。</p><p>以下是递归和迭代实现方式。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> insert_bst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">BST_TREE_NODE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">**</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> BST_TREE_NODE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t\treturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">root </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">root </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> node;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    BST_TREE_NODE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">current </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">root;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">left_child</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">left_child</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> node;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            current </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">left_child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">right_child</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">right_child</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> node;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            current </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">right_child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t\t\t//已存在时，释放要插入的元素</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            free</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(node);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> insert_bst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">BST_TREE_NODE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">**</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> BST_TREE_NODE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t\treturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">root </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t\t*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">root </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> node;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t\treturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(val </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">root)-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">\t\tinsert_bst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">root)-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">left_child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), node);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t}</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(val </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">root)-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">\t\tinsert_bst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">root)-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">right_child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), node);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t}</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">\t\tfree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(node);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>BST 的构造</strong>：</p><p>将一个查找表中的元素构造为一颗 BST 不外乎就是一直向 BST 根结点中插入元素。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> build_bst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">BST_TREE_NODE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">**</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> BST_TREE_NODE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">**</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">nodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">root </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> len; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        insert_bst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(root, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">nodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i]);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相信理解了 BST 的插入和寻找，这个是非常容易理解的！</p><hr><p><strong>BST 的删除</strong>：</p><p>在删除了某个结点后不是笼统的将其和子树结点一起删除，而是只删除该结点并使 BST 保持原本的性质。</p><p>在这里就会出现 3 种情况了：</p><ul><li>删除叶子结点：直接删除则可，并不会影响任何东西，这是最爽的😛。</li><li>删除的结点只有一颗子树（不管是左还是右，反正只有一颗）：那么在删除了该结点后要将子树的根结点补上。</li><li>删除的结构有两颗子树：在删除该结点后使用该结点中序遍历序列的直接前驱或者直接后继补上，这样就可以转换为前两种情况了！</li></ul><p>因为一个根结点的直接前驱会跑到左子树的最右侧的节点，必为上面的两种情况之一，同理，直接后继也是这样的情况。</p><p>前两种情况较为简单，则只举第三种情况的例子。</p><figure><img src="https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743593876122-c0fbb686-4256-4f23-bfa6-cedf4a5fa229.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="平衡二叉树-avl" tabindex="-1"><a class="header-anchor" href="#平衡二叉树-avl"><span>平衡二叉树（AVL）</span></a></h3><p>BST 在某些时候会退化为链表，故引入平衡二叉树，避免出现这种情况。</p><p><strong>AVL</strong>：可以是一颗空树或者满足以下性质的二叉树：</p><ul><li>平衡二叉树的左右子树也是一颗平衡二叉树</li><li>左右子树的高度只差不超过 1，也就是<img src="https://cdn.nlark.com/yuque/__latex/d953344da538511df54023a1878976a6.svg" alt="img" loading="lazy"></li><li>AVL 中结点值关系和 BST 一致（左小、根中、右大）</li></ul><figure><img src="https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743594427250-67f82241-8db4-493c-9ccd-02e661469cda.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>每个结点中的数值就为该结点的平衡因子（左右子树高度之差）。</p><hr><p><strong>AVL 的插入</strong>：</p><p>AVL 的性质比 BST 的严格多了，所以在插入结点后被破坏了性质而进行的操作也比 BST 的操作复杂许多！</p><p>会涉及到 RR、LL、RL、LR 这四种操作。下面一一来说明什么情况下使用什么操作。</p><hr><p>AVL 插入的过程：先和 BST 一样，找到合适的位置插入，但是这个插入可能会导致<strong>平衡因子</strong>的绝对值大于 1，此时引入下面 4 种操作！注意每次操作都是在最小不平衡子树上进行的。</p><p><strong>最小不平衡子树</strong>：在<strong>插入路径</strong>上离<strong>插入结点最近</strong>的<strong>平衡因子绝对值大于 1</strong> 的结点<strong>作为根的子树</strong>。</p><p>下面的操作的最小不平衡子树的根结点为 A。</p><ul><li>RR（左单旋操作）：新结点在 A 的右孩子的右子树上插入，A 的右孩子为 B，则需要将 B 代替 A 作为根结点，A 作为 B 的左孩子，B 原本的左子树作为 A 的右子树。</li><li>LL（右单旋操作）：新结点在 A 的左孩子的左子树上插入，A 的左孩子为 B，则需要将 B 代替 A 作为根节点，A 作为 B 的右孩子，B 原本的右子树作为 A 的左子树。</li><li>RL（右左双旋操作）：新结点在 A 的右孩子的左子树上插入，A 的右孩子为 B，B 的左子树的根结点为 C，则需要先将 C 进行右旋操作，让 C 代替 B 的位置，然后再对 C 进行左旋操作，代替 A 的位置。</li><li>LR（左右双旋操作）：新结点在 A 的左孩子的右子树上插入，A 的左孩子为 B，B 的右子树的根结点为 C，则需要先将 C 进行左旋操作，让 C 代替 B 的位置，然后再对 C 进行右旋操作，代替 A 的位置。</li></ul><p><strong>具体的例子</strong>：单次操作和多次操作的各举一个例子，比较简单，理解一下则可。</p><figure><img src="https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743667895235-4b97d5f7-977a-46c7-b56a-873e1e172481.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><hr><p><strong>AVL 的构造</strong>：</p><p>构造就是不断地插入结点，若插入的节点导致不满足 AVL 的性质时，使用上面的 4 中操作进行调整，直到要插入的结点全部插入。</p><hr><p><strong>AVL 的删除</strong>：</p><p>AVL 删除和 BST 的删除一样，不管多了一个判断平衡因子的步骤！</p><p>假设：删除 w 结点，判断该 AVL 是否平衡，若不平衡则从 w 开始向上回溯，找到的第一个不平衡的结点 z（最小不平衡子树的根）；y 是结点 z 高度最高的孩子结点，x 为 结点 y 高度最高的孩子结点。</p><ul><li>若 y 是 z 的左孩子，x 是 y 的左孩子，使用右单旋操作。</li><li>若 y 是 z 的右孩子，x 是 y 的右孩子，使用左单旋操作。</li><li>若 y 是 z 的左孩子，x 是 y 的右孩子，使用左右双旋操作。</li><li>若 y 是 z 的右孩子，x 是 y 的左孩子，使用右左双旋操作。</li></ul><p>这些操作都和 AVL 的插入如出一辙，就不再赘述了。</p><hr><p><strong>AVL 的查找</strong>：</p><p>这个和 BST 的查找一样，故其比较关键字的次数还是不超过 AVL 树的深度。</p><p>我们使用<img src="https://cdn.nlark.com/yuque/__latex/0c3e4ad6127db0eaa2934769e2098781.svg" alt="img" loading="lazy">来表示深度为 h 的 AVL 中含有<strong>最少的结点数</strong>，则有：</p><p><img src="https://cdn.nlark.com/yuque/__latex/4debd1dae7a87dede549309d9151c011.svg" alt="img" loading="lazy">；</p><p><img src="https://cdn.nlark.com/yuque/__latex/90d491e76ef96c7710d60992e52c462b.svg" alt="img" loading="lazy">；</p><p><img src="https://cdn.nlark.com/yuque/__latex/c46a928b11c167a7ae9571374b0c70d8.svg" alt="img" loading="lazy">;</p><p>因为有左右子树相差不能超过 1 的条件，我们可以知道，<img src="https://cdn.nlark.com/yuque/__latex/de82a7edf594edbb3540c7b16231dc73.svg" alt="img" loading="lazy">，因此含有 n 个结点的 AVL 最大深度为<img src="https://cdn.nlark.com/yuque/__latex/65c54415e21b8b592c65dc4cd43cbd33.svg" alt="img" loading="lazy">故平均查找效率为：<img src="https://cdn.nlark.com/yuque/__latex/65c54415e21b8b592c65dc4cd43cbd33.svg" alt="img" loading="lazy"></p><p>说了最少结点数的情况，不得不说一下<strong>最多结点数的情况</strong>，显然是 AVL 为满二叉树时，结点数最多咯！</p><hr><h3 id="红黑树-rbt" tabindex="-1"><a class="header-anchor" href="#红黑树-rbt"><span>红黑树（RBT）</span></a></h3><p>在 AVL 中插入或者删除一个结点后，会频繁地调整全树整体的拓扑结构，这样的代价是很大的，究其原因还是条件太过严格，故为了减小消耗，引入条件更加宽松的<strong>红黑树</strong>。</p><p><strong>RBT</strong>：可以是一颗空树或者满足以下条件的二叉树：</p><ul><li>每颗结点要么是红色的，要么是黑色的</li><li>根节点是黑色的</li><li>叶结点（虚构的外部结点，NULL 结点）</li><li>不存在两个相邻的红结点</li><li>满足 BST 结点值的关系</li><li>每个结点到任意叶子结点的简单路径上，所含有的黑色结点数相同</li></ul><p>怎样描述 RBT 的特性的呢？使用黑高（bh），概念如下：</p><p>黑高：从某结点出发（不包含该结点）到达一个叶子结点的任意一个简单路径上的黑色结点个数。</p><p>根据 RBT 的定义，我们可以知道几个关于 RBT的结论：</p><ul><li><strong>从根结点到叶子结点的最长路径不大于最短路径的 2 倍</strong>。原因：在最短时，路径上的所有结点都为黑色，而最长时，是红黑相间的，故最长的路径不会超过最短的路径 2 倍。</li><li><strong>有 n 个内部结点的 RBT 的高度</strong> <img src="https://cdn.nlark.com/yuque/__latex/d4106b5a12936fd96b563b3a7c22525a.svg" alt="img" loading="lazy">。原因：因为在<img src="https://cdn.nlark.com/yuque/__latex/8845e360e0c914556a99af8222f95fa9.svg" alt="img" loading="lazy"> 时，RBT 的最少内部结点数<img src="https://cdn.nlark.com/yuque/__latex/3dc57255e3604229fe9d3ea2eeef3ad1.svg" alt="img" loading="lazy">个，又因为 RBT 的 <img src="https://cdn.nlark.com/yuque/__latex/0f5a46fa3466282767b6a3121272aef5.svg" alt="img" loading="lazy">，故在 RBT 的内部结点树高为 h 时有：<img src="https://cdn.nlark.com/yuque/__latex/3f1e280fc5dc585143eb3169eeda49b8.svg" alt="img" loading="lazy">，化简后就为上面的结论。</li><li><strong>新插入 RBT 的结点初始时为红色</strong>。原因：若插入结点为黑色则需要考虑每个结点到叶子结点的 bh 是否相等，调整起来很麻烦，而插入的新结点为红色的话，则只需要考虑相邻的结点是不是一样的红色，较为简单，而且只会在出现连续的两个红色结点才进行调整。</li></ul><p>因为 RBT 是“适度平衡”，从 AVL 中每颗结点的子树高度相差不能超过 1 扩展到 RBT 每颗结点的子树相差不超过两倍，所以降低了调整的频率，维护的代价比收益小，故 RBT 在实际运用的很广！Java 中的 <code>TreeMap</code>和 <code>TreeSet</code>就是使用 RBT 实现的。</p><p>其查找的时间复杂度还是为：<img src="https://cdn.nlark.com/yuque/__latex/65c54415e21b8b592c65dc4cd43cbd33.svg" alt="img" loading="lazy">。</p><hr><p><strong>红黑树的插入</strong>：</p><p>因为最基础的还是 BST，不过在这基础上进行优化了，所以插入的方式和 BST 的一样，但是若出现了违背 RBT 性质的结点出现则需要调整，调整的手段就是<strong>旋转</strong>+<strong>调色</strong>！</p><p>对于为什么会这样，有兴趣可以去搜索看看具体的证明，设计到了数学上面的证明，而我们是应试考试和使用者，明白这样使用就已经可以了，所以不用纠结为什么会这样，说白了，这样调整就是为了保持 RBT 的性质。</p><p>ok，下面来具体介绍怎样调整！</p><p>设插入的结点为 z。</p><figure><img src="https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743688151664-e0464ea6-e4fe-4da2-9a1d-aea29a24535a.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="b-树和-b-树" tabindex="-1"><a class="header-anchor" href="#b-树和-b-树"><span>B 树和 B+树</span></a></h2><h3 id="b-树" tabindex="-1"><a class="header-anchor" href="#b-树"><span>B 树</span></a></h3><h3 id="b-树-1" tabindex="-1"><a class="header-anchor" href="#b-树-1"><span>B+树</span></a></h3><h2 id="散列表" tabindex="-1"><a class="header-anchor" href="#散列表"><span>散列表</span></a></h2>',182)]))}]]),h=JSON.parse('{"path":"/cs-basic/data-structure/search-algorithm.html","title":"查找算法","lang":"zh-CN","frontmatter":{"title":"查找算法","icon":"magnifying-glass","categories":["408","算法","查找算法"],"description":"下面代码和示例都默认使用整数类型。 查找的概念 查找：在数据集合中寻找满足某种条件的数据元素的过程称为查找。 查找的结果只能有两种，分别为查找成功和查找失败，前者表示在查找表中寻找到了满足条件的元素，后者表示没有在查找表中寻找到满足条件的元素。 这里出现的查找表就是用于查找的数据集合，其由同一类型的元素组成。 查找表有两种分类分别为： 静态查找表：对查...","head":[["meta",{"property":"og:url","content":"https://github.com/amatureemoprince/cs-basic/data-structure/search-algorithm.html"}],["meta",{"property":"og:site_name","content":"Java咖啡馆"}],["meta",{"property":"og:title","content":"查找算法"}],["meta",{"property":"og:description","content":"下面代码和示例都默认使用整数类型。 查找的概念 查找：在数据集合中寻找满足某种条件的数据元素的过程称为查找。 查找的结果只能有两种，分别为查找成功和查找失败，前者表示在查找表中寻找到了满足条件的元素，后者表示没有在查找表中寻找到满足条件的元素。 这里出现的查找表就是用于查找的数据集合，其由同一类型的元素组成。 查找表有两种分类分别为： 静态查找表：对查..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.nlark.com/yuque/__latex/e0103d33dfc7fe71ca16501ef30d2919.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-03T13:52:59.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-03T13:52:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"查找算法\\",\\"image\\":[\\"https://cdn.nlark.com/yuque/__latex/e0103d33dfc7fe71ca16501ef30d2919.svg\\",\\"https://cdn.nlark.com/yuque/__latex/60b7f8a498a516989cfb2315f66209ec.svg\\",\\"https://cdn.nlark.com/yuque/__latex/282ff0c1015821da5017765ed7c1e43c.svg\\",\\"https://cdn.nlark.com/yuque/__latex/6d0fe423fb8807f16cd53865b40f7df7.svg\\",\\"https://cdn.nlark.com/yuque/__latex/b3e446f65eb8aeac98b741ad30fcea2e.svg\\",\\"https://cdn.nlark.com/yuque/__latex/6d0fe423fb8807f16cd53865b40f7df7.svg\\",\\"https://cdn.nlark.com/yuque/__latex/475deef5404d77187e448ff8ddd324ed.svg\\",\\"https://cdn.nlark.com/yuque/__latex/f51e2121b22eebe4a5238d1f228bbb52.svg\\",\\"https://cdn.nlark.com/yuque/__latex/4befdf8673a154ed660ab91b6b83c760.svg\\",\\"https://cdn.nlark.com/yuque/__latex/c3cabf9815a3d9963d5a53b0295c85af.svg\\",\\"https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743515983653-08346e79-982b-42d5-8eea-1ecca15f956b.jpeg\\",\\"https://cdn.nlark.com/yuque/__latex/f51e2121b22eebe4a5238d1f228bbb52.svg\\",\\"https://cdn.nlark.com/yuque/__latex/8619a6152843b1dc8c1df14e0d4bf3c8.svg\\",\\"https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743553658951-64fe98d9-a860-4914-bce6-d0292fb4cfee.jpeg\\",\\"https://cdn.nlark.com/yuque/__latex/7974c5becc851c07498098fe376d9dbd.svg\\",\\"https://cdn.nlark.com/yuque/__latex/44ae2cd43544c32bdf1d4e4112aaf5ff.svg\\",\\"https://cdn.nlark.com/yuque/__latex/087934cfc0c944281f7961a06ec64c91.svg\\",\\"https://cdn.nlark.com/yuque/__latex/65c54415e21b8b592c65dc4cd43cbd33.svg\\",\\"https://cdn.nlark.com/yuque/__latex/5d1bcfa5e4c17686c70a19ca62094c46.svg\\",\\"https://cdn.nlark.com/yuque/__latex/11a20c4770780ca3d1a652a18a7b4373.svg\\",\\"https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743555894582-0b512579-dc43-4171-8946-779d008426fa.jpeg\\",\\"https://cdn.nlark.com/yuque/__latex/daa0521f3a59730abd3a2cbcd6101576.svg\\",\\"https://cdn.nlark.com/yuque/__latex/2a53672f3b51de6e90b890e878b30341.svg\\",\\"https://cdn.nlark.com/yuque/__latex/3b0df814ee9a55084a1cb8fd12b58e57.svg\\",\\"https://cdn.nlark.com/yuque/__latex/5b951166ca34b3af6c4e9a3da9cc03fc.svg\\",\\"https://cdn.nlark.com/yuque/__latex/034cb7d8bae5d396d5230a477bf17e04.svg\\",\\"https://cdn.nlark.com/yuque/__latex/65c54415e21b8b592c65dc4cd43cbd33.svg\\",\\"https://cdn.nlark.com/yuque/__latex/65c54415e21b8b592c65dc4cd43cbd33.svg\\",\\"https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743562715439-e846b403-d8f8-47e3-8574-14053697a66a.jpeg\\",\\"https://cdn.nlark.com/yuque/__latex/65c54415e21b8b592c65dc4cd43cbd33.svg\\",\\"https://cdn.nlark.com/yuque/__latex/e65a67ac353abeeff44c359310d05c02.svg\\",\\"https://cdn.nlark.com/yuque/__latex/3c27b30a971bc5e9f6eb5d61efe17846.svg\\",\\"https://cdn.nlark.com/yuque/__latex/935db81b0307b34fef4e68aee29c0598.svg\\",\\"https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743593876122-c0fbb686-4256-4f23-bfa6-cedf4a5fa229.jpeg\\",\\"https://cdn.nlark.com/yuque/__latex/d953344da538511df54023a1878976a6.svg\\",\\"https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743594427250-67f82241-8db4-493c-9ccd-02e661469cda.jpeg\\",\\"https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743667895235-4b97d5f7-977a-46c7-b56a-873e1e172481.jpeg\\",\\"https://cdn.nlark.com/yuque/__latex/0c3e4ad6127db0eaa2934769e2098781.svg\\",\\"https://cdn.nlark.com/yuque/__latex/4debd1dae7a87dede549309d9151c011.svg\\",\\"https://cdn.nlark.com/yuque/__latex/90d491e76ef96c7710d60992e52c462b.svg\\",\\"https://cdn.nlark.com/yuque/__latex/c46a928b11c167a7ae9571374b0c70d8.svg\\",\\"https://cdn.nlark.com/yuque/__latex/de82a7edf594edbb3540c7b16231dc73.svg\\",\\"https://cdn.nlark.com/yuque/__latex/65c54415e21b8b592c65dc4cd43cbd33.svg\\",\\"https://cdn.nlark.com/yuque/__latex/65c54415e21b8b592c65dc4cd43cbd33.svg\\",\\"https://cdn.nlark.com/yuque/__latex/d4106b5a12936fd96b563b3a7c22525a.svg\\",\\"https://cdn.nlark.com/yuque/__latex/8845e360e0c914556a99af8222f95fa9.svg\\",\\"https://cdn.nlark.com/yuque/__latex/3dc57255e3604229fe9d3ea2eeef3ad1.svg\\",\\"https://cdn.nlark.com/yuque/__latex/0f5a46fa3466282767b6a3121272aef5.svg\\",\\"https://cdn.nlark.com/yuque/__latex/3f1e280fc5dc585143eb3169eeda49b8.svg\\",\\"https://cdn.nlark.com/yuque/__latex/65c54415e21b8b592c65dc4cd43cbd33.svg\\",\\"https://cdn.nlark.com/yuque/0/2025/jpeg/48073730/1743688151664-e0464ea6-e4fe-4da2-9a1d-aea29a24535a.jpeg\\"],\\"dateModified\\":\\"2025-04-03T13:52:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"阿杰 like coding bug ❥\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"git":{"createdTime":1740981411000,"updatedTime":1743688379000,"contributors":[{"name":"lj","username":"lj","email":"2069057986@qq.com","commits":5,"url":"https://github.com/lj"}]},"readingTime":{"minutes":19.07,"words":5722},"filePathRelative":"cs-basic/data-structure/search-algorithm.md","localizedDate":"2025年3月3日","excerpt":"<p>下面代码和示例都默认使用整数类型。</p>\\n<hr>\\n<h2>查找的概念</h2>\\n<p><strong>查找</strong>：在数据集合中寻找满足某种条件的数据元素的过程称为查找。</p>\\n<p>查找的结果只能有两种，分别为<strong>查找成功</strong>和<strong>查找失败</strong>，前者表示在查找表中寻找到了满足条件的元素，后者表示没有在查找表中寻找到满足条件的元素。</p>\\n<p>这里出现的<strong>查找表</strong>就是<strong>用于查找的数据集合</strong>，其由同一类型的元素组成。</p>\\n<p>查找表有两种分类分别为：</p>","autoDesc":true}')},6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}}}]);