"use strict";(self.webpackChunktechnology_life_blog=self.webpackChunktechnology_life_blog||[]).push([[141],{6262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,e]of i)a[s]=e;return a}},7097:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>n,data:()=>l});var e=a(641);const t={},n=(0,a(6262).A)(t,[["render",function(s,i){return(0,e.uX)(),(0,e.CE)("div",null,i[0]||(i[0]=[(0,e.Fv)('<h2 id="栈" tabindex="-1"><a class="header-anchor" href="#栈"><span>栈</span></a></h2><blockquote><p>定义：只允许在一端进行插入或删除操作的线性表。</p></blockquote><p>我们要明白<strong>栈</strong>也是一种<strong>线性表</strong>，但是一端被限制了操作。</p><p><img src="https://camo.githubusercontent.com/d11d2b0208ce67171dfd5d6fd324a5883bcc665d21a682264de8760e5696eed9/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f79757175652f302f323032352f706e672f34383037333733302f313734313236383339353437382d61333639323664662d343137612d343939312d623232612d6437333234613066313635662e706e67" alt="栈的示意图" loading="lazy"><br> 我们需要知道的几个概念：</p><ul><li>栈顶：线性表允许进行插入和删除操作的一端。</li><li>栈底：固定的，不允许进行插入和删除的一端。</li><li>空栈：不含有任何元素的空表。</li></ul>',5),(0,e.Lk)("p",null,[(0,e.eW)("栈有个重要的数学性质："),(0,e.Lk)("strong",null,[(0,e.eW)("当有 n 个不同元素入栈时，出栈元素的不同排列个数有"),(0,e.Lk)("span",{class:"katex"},[(0,e.Lk)("span",{class:"katex-mathml"},[(0,e.Lk)("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[(0,e.Lk)("semantics",null,[(0,e.Lk)("mrow",null,[(0,e.Lk)("mfrac",null,[(0,e.Lk)("mn",null,"1"),(0,e.Lk)("mrow",null,[(0,e.Lk)("mi",null,"n"),(0,e.Lk)("mo",null,"+"),(0,e.Lk)("mn",null,"1")])]),(0,e.Lk)("mrow",null,[(0,e.Lk)("mo",{fence:"true"},"("),(0,e.Lk)("mfrac",{linethickness:"0px"},[(0,e.Lk)("mrow",null,[(0,e.Lk)("mn",null,"2"),(0,e.Lk)("mi",null,"n")]),(0,e.Lk)("mi",null,"n")]),(0,e.Lk)("mo",{fence:"true"},")")])]),(0,e.Lk)("annotation",{encoding:"application/x-tex"},"\\frac{1}{n + 1} \\binom{2n}{n}")])])]),(0,e.Lk)("span",{class:"katex-html","aria-hidden":"true"},[(0,e.Lk)("span",{class:"base"},[(0,e.Lk)("span",{class:"strut",style:{height:"1.2984em","vertical-align":"-0.4033em"}}),(0,e.Lk)("span",{class:"mord"},[(0,e.Lk)("span",{class:"mopen nulldelimiter"}),(0,e.Lk)("span",{class:"mfrac"},[(0,e.Lk)("span",{class:"vlist-t vlist-t2"},[(0,e.Lk)("span",{class:"vlist-r"},[(0,e.Lk)("span",{class:"vlist",style:{height:"0.8451em"}},[(0,e.Lk)("span",{style:{top:"-2.655em"}},[(0,e.Lk)("span",{class:"pstrut",style:{height:"3em"}}),(0,e.Lk)("span",{class:"sizing reset-size6 size3 mtight"},[(0,e.Lk)("span",{class:"mord mtight"},[(0,e.Lk)("span",{class:"mord mathnormal mtight"},"n"),(0,e.Lk)("span",{class:"mbin mtight"},"+"),(0,e.Lk)("span",{class:"mord mtight"},"1")])])]),(0,e.Lk)("span",{style:{top:"-3.23em"}},[(0,e.Lk)("span",{class:"pstrut",style:{height:"3em"}}),(0,e.Lk)("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),(0,e.Lk)("span",{style:{top:"-3.394em"}},[(0,e.Lk)("span",{class:"pstrut",style:{height:"3em"}}),(0,e.Lk)("span",{class:"sizing reset-size6 size3 mtight"},[(0,e.Lk)("span",{class:"mord mtight"},[(0,e.Lk)("span",{class:"mord mtight"},"1")])])])]),(0,e.Lk)("span",{class:"vlist-s"},"​")]),(0,e.Lk)("span",{class:"vlist-r"},[(0,e.Lk)("span",{class:"vlist",style:{height:"0.4033em"}},[(0,e.Lk)("span")])])])]),(0,e.Lk)("span",{class:"mclose nulldelimiter"})]),(0,e.Lk)("span",{class:"mord"},[(0,e.Lk)("span",{class:"mopen delimcenter",style:{top:"0em"}},[(0,e.Lk)("span",{class:"delimsizing size1"},"(")]),(0,e.Lk)("span",{class:"mfrac"},[(0,e.Lk)("span",{class:"vlist-t vlist-t2"},[(0,e.Lk)("span",{class:"vlist-r"},[(0,e.Lk)("span",{class:"vlist",style:{height:"0.8951em"}},[(0,e.Lk)("span",{style:{top:"-2.355em"}},[(0,e.Lk)("span",{class:"pstrut",style:{height:"2.7em"}}),(0,e.Lk)("span",{class:"sizing reset-size6 size3 mtight"},[(0,e.Lk)("span",{class:"mord mtight"},[(0,e.Lk)("span",{class:"mord mathnormal mtight"},"n")])])]),(0,e.Lk)("span",{style:{top:"-3.144em"}},[(0,e.Lk)("span",{class:"pstrut",style:{height:"2.7em"}}),(0,e.Lk)("span",{class:"sizing reset-size6 size3 mtight"},[(0,e.Lk)("span",{class:"mord mtight"},[(0,e.Lk)("span",{class:"mord mtight"},"2"),(0,e.Lk)("span",{class:"mord mathnormal mtight"},"n")])])])]),(0,e.Lk)("span",{class:"vlist-s"},"​")]),(0,e.Lk)("span",{class:"vlist-r"},[(0,e.Lk)("span",{class:"vlist",style:{height:"0.345em"}},[(0,e.Lk)("span")])])])]),(0,e.Lk)("span",{class:"mclose delimcenter",style:{top:"0em"}},[(0,e.Lk)("span",{class:"delimsizing size1"},")")])])])])]),(0,e.eW)("个。")])],-1),(0,e.Fv)('<h3 id="栈的不同实现方式" tabindex="-1"><a class="header-anchor" href="#栈的不同实现方式"><span>栈的不同实现方式</span></a></h3><h4 id="_1-顺序表的实现方式" tabindex="-1"><a class="header-anchor" href="#_1-顺序表的实现方式"><span>1. 顺序表的实现方式</span></a></h4><p>使用一组地址连续的存储单元存放从栈底到栈顶的数据元素并且使用一个top指针指向当前栈顶元素。</p><p>使用C语言定义的结构体为：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Stack{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[MAX_SIZE];</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> top;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}Stack;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>栈中的top在初始化时可以根据不同的需要初始化为不同的值，常见的有-1和0。在做题时需要小心top的初始化值，在不同的情况下，入栈和出栈的代码有些许不同。</p><h5 id="初始化栈" tabindex="-1"><a class="header-anchor" href="#初始化栈"><span>初始化栈</span></a></h5><p>我们将top初始化为-1。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Stack </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Stack </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">stack </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (Stack </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">malloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Stack));</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(stack </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        fprintf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(stderr, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;分配给栈的内存出错&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        exit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    stack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">top</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stack;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-链表的实现方式" tabindex="-1"><a class="header-anchor" href="#_2-链表的实现方式"><span>2. 链表的实现方式</span></a></h4><h2 id="队列" tabindex="-1"><a class="header-anchor" href="#队列"><span>队列</span></a></h2><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2>',12)]))}]]),l=JSON.parse('{"path":"/cs-basic/data-structure/stack-queue-array.html","title":"栈、队列和数组","lang":"zh-CN","frontmatter":{"title":"栈、队列和数组","icon":"hands-bubbles","categories":["408","数据结构","栈、队列、数组"],"description":"栈 定义：只允许在一端进行插入或删除操作的线性表。 我们要明白栈也是一种线性表，但是一端被限制了操作。 栈的示意图 我们需要知道的几个概念： 栈顶：线性表允许进行插入和删除操作的一端。 栈底：固定的，不允许进行插入和删除的一端。 空栈：不含有任何元素的空表。 栈有个重要的数学性质：当有 n 个不同元素入栈时，出栈元素的不同排列个数有n+11​(n2n​...","head":[["meta",{"property":"og:url","content":"https://github.com/amatureemoprince/TechnologyAndLife/cs-basic/data-structure/stack-queue-array.html"}],["meta",{"property":"og:site_name","content":"Java咖啡馆"}],["meta",{"property":"og:title","content":"栈、队列和数组"}],["meta",{"property":"og:description","content":"栈 定义：只允许在一端进行插入或删除操作的线性表。 我们要明白栈也是一种线性表，但是一端被限制了操作。 栈的示意图 我们需要知道的几个概念： 栈顶：线性表允许进行插入和删除操作的一端。 栈底：固定的，不允许进行插入和删除的一端。 空栈：不含有任何元素的空表。 栈有个重要的数学性质：当有 n 个不同元素入栈时，出栈元素的不同排列个数有n+11​(n2n​..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://camo.githubusercontent.com/d11d2b0208ce67171dfd5d6fd324a5883bcc665d21a682264de8760e5696eed9/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f79757175652f302f323032352f706e672f34383037333733302f313734313236383339353437382d61333639323664662d343137612d343939312d623232612d6437333234613066313635662e706e67"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-06T14:03:28.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-06T14:03:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"栈、队列和数组\\",\\"image\\":[\\"https://camo.githubusercontent.com/d11d2b0208ce67171dfd5d6fd324a5883bcc665d21a682264de8760e5696eed9/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f79757175652f302f323032352f706e672f34383037333733302f313734313236383339353437382d61333639323664662d343137612d343939312d623232612d6437333234613066313635662e706e67\\"],\\"dateModified\\":\\"2025-03-06T14:03:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"阿杰 like coding bug ❥\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"git":{"createdTime":1740981411000,"updatedTime":1741269808000,"contributors":[{"name":"lj","username":"lj","email":"2069057986@qq.com","commits":2,"url":"https://github.com/lj"}]},"readingTime":{"minutes":1.26,"words":378},"filePathRelative":"cs-basic/data-structure/stack-queue-array.md","localizedDate":"2025年3月3日","excerpt":"<h2>栈</h2>\\n<blockquote>\\n<p>定义：只允许在一端进行插入或删除操作的线性表。</p>\\n</blockquote>\\n<p>我们要明白<strong>栈</strong>也是一种<strong>线性表</strong>，但是一端被限制了操作。</p>\\n<p><img src=\\"https://camo.githubusercontent.com/d11d2b0208ce67171dfd5d6fd324a5883bcc665d21a682264de8760e5696eed9/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f79757175652f302f323032352f706e672f34383037333733302f313734313236383339353437382d61333639323664662d343137612d343939312d623232612d6437333234613066313635662e706e67\\" alt=\\"栈的示意图\\" loading=\\"lazy\\"><br>\\n我们需要知道的几个概念：</p>","autoDesc":true}')}}]);