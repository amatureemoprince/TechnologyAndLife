"use strict";(self.webpackChunktechnology_life_blog=self.webpackChunktechnology_life_blog||[]).push([[8202],{6262:(s,a)=>{a.A=(s,a)=>{const i=s.__vccOpts||s;for(const[s,n]of a)i[s]=n;return i}},9478:(s,a,i)=>{i.r(a),i.d(a,{comp:()=>p,data:()=>e});var n=i(641);const t={},p=(0,i(6262).A)(t,[["render",function(s,a){return(0,n.uX)(),(0,n.CE)("div",null,a[0]||(a[0]=[(0,n.Fv)('<h2 id="串的定义" tabindex="-1"><a class="header-anchor" href="#串的定义"><span>串的定义</span></a></h2><blockquote><p>定义：由零个或多个字符组成的有限序列。</p></blockquote><p>记为：S = &#39;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><msub><mi>a</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_1a_2...a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>&#39; (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n \\geq 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>)</p><p>S是串的名称，其中字符个数称为串的长度。当n = 0时，称其为<strong>空串</strong>。</p><p>串中任意多个连续的子序列称为该串的<strong>子串</strong>。包含这个子串的字符串称为<strong>主串</strong>。子串在主串中的位置是子串与主串相同时子串第一个字符在主串中的位置。</p><p>如：主串&quot;I AM A PIG&quot;中有个子串&quot;PIG&quot;，子串的位置是8，空格也是需要加入计算的。</p><p>通常来说串的基本操作是以子串作为操作对象的，这一点和线性表有着不同。</p><h2 id="串的基本操作" tabindex="-1"><a class="header-anchor" href="#串的基本操作"><span>串的基本操作</span></a></h2><ul><li>strCopy(char *string, char *data)：将data的字符串复制给string</li><li>subString(char *string, char *data, int start, int len)：使用string返回data中从start开始长度为len的子串</li><li>strLength(char *string)：返回string的长度</li><li>index(char *s, char *t)：定位，若s中存在t则返回t的位置，否则返回0</li><li>contact(char *s, char *t, char *m)：连接，将t和m连接起来使用s返回</li><li>strCompare(char *s, char *t)：比较字符串，s大于t则返回1，s=t返回0，s小于t返回-1</li><li>clear(char *s)：将s中的字符全部清除，使其变为空串</li></ul><p>根据上面的基本操作可以构建更复杂更强大的功能。</p><h2 id="串的存储结构" tabindex="-1"><a class="header-anchor" href="#串的存储结构"><span>串的存储结构</span></a></h2><h3 id="顺序存储结构" tabindex="-1"><a class="header-anchor" href="#顺序存储结构"><span>顺序存储结构</span></a></h3><p>C语言结构体为：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> String{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[MAX_SIZE];</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> length;    </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用这种需要额外添加一个length，用于存储字符串的长度用以避免使用循环获取，其长度是固定的在声明之后无法进行修改长度。</p><p>如果添加的字符串长度大于MAX_SIZE就会发生<strong>截断</strong>。并且串长可以有两种表示方式，一就是上面的那种使用length记录，二是在字符串最后添加一个&#39;\\0&#39;，这个是不计入串长的，所以导致获取长度时要遍历。</p><h3 id="堆分配存储结构" tabindex="-1"><a class="header-anchor" href="#堆分配存储结构"><span>堆分配存储结构</span></a></h3><p>和之前学习的的链表一样，为了解决“固定”的问题。在上述的顺序结构中一旦初始化，其长度就不能变化了，但是在应用中我们一般不能预见到底需要初始化多长的结构，故采用这种堆分配的结构。</p><p>在C语言中，有一个可以自由分配的区域，称其为<strong>堆区</strong>，使用malloc()和free()进行动态的分配。在之前的代码中也使用了，需要注意的是使用malloc()获取的地址在使用后需要手动调用free()释放。</p><h3 id="块链存储结构" tabindex="-1"><a class="header-anchor" href="#块链存储结构"><span>块链存储结构</span></a></h3><figure><img src="https://camo.githubusercontent.com/f8aff397da09a4481fafc8b6a694254acee573318a5f7f7af52be7833c9a448e/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f79757175652f302f323032352f706e672f34383037333733302f313734313537323136313939372d31336662666530652d356364322d346234622d626131352d3135623837306334336338652e706e67" alt="块链存储示意图" tabindex="0" loading="lazy"><figcaption>块链存储示意图</figcaption></figure><p>也是使用链式存储不过每个节点可以存放多个字符。如上：每个节点存储的字符数为4，如果一个节点中的字符不足就使用 <strong>#</strong> 填充。</p><p>这样呢，让每个节点的存储密度上升了。</p><h2 id="串的模式匹配" tabindex="-1"><a class="header-anchor" href="#串的模式匹配"><span>串的模式匹配</span></a></h2><p>我们需要知道：</p><ul><li>模式串：要进行匹配的字符串</li><li>模式匹配：在主串中找到和模式串相同的子串，并返回对应的位置</li></ul><h3 id="简单模式匹配" tabindex="-1"><a class="header-anchor" href="#简单模式匹配"><span>简单模式匹配</span></a></h3><p>采用的存储结构为第一种，但第一个字符从索引为1开始。简单模式匹配本质就是暴力破解，一次一次遍历主串和模式串，直到匹配到的子串和模式串相等。</p><p>显然此种算法的时间复杂度为：O(nm)（n位主串长度，m为模式串长度），在一些情况下有着大量地不必要比较。</p><p>C语言表示算法：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">String </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> String </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[j]){</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            j</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kmp算法" tabindex="-1"><a class="header-anchor" href="#kmp算法"><span>KMP算法</span></a></h3><p>为了优化上面暴力破解时一些没有必要的比较，于是就诞生了KMP算法。</p><p>使用KMP算法时，主串上的i是不会回退的，要么前进，要么不动。</p><p>在学习KMP算法之前我们需要知道一些概念：</p><ul><li>前缀：除最后一个字符外，字符串的所有头部子串</li><li>后缀：除第一个字符外，字符串的所有尾部子串</li><li>部分匹配值：字符串的前缀和后缀的<strong>最长相等</strong>前后缀长度</li></ul><p>看着这些概念是模糊的，我们来举个例子：使用字符串 &quot;aabbaa&quot;</p><p>子串&quot;a&quot;的前缀和后缀都没有所以最长相等前后缀长度为0</p><p>子串&quot;aa&quot;的前缀为{a}后缀为{a}所以最长相等前后缀长度为1</p><p>子串&quot;aab&quot;的前缀为{a, aa}后缀为{b, ab}所以最长相等前后缀长度为0</p><p>子串&quot;aabb&quot;的前缀为{a, aa, aab}后缀为{b, bb, abb}所以最长相等前后缀长度为0</p><p>子串&quot;aabba&quot;的前缀为{a, aa, aab, aabb}后缀为{a, ba, bba, abba}所以最长相等前后缀长度为1</p><p>子串&quot;aabbaa&quot;的前缀为{a, aa, aab, aabb, aabba}后缀为{a, aa, baa, bbaa, abbaa}所以最长相等前后缀长度为2</p><p>所以字符串的部分匹配值为：0 1 0 0 1 2</p><p>我们想一下这个最长相等前后缀长度有什么意义呢？</p><p>知道字符串的最长前后缀长度，就知道了这个字符串前面和后面最多有几个字符相等了。如果在匹配过程中遇到不匹配时就可以查询这个部分匹配值表来确定移动的位数，就不用一位一位地移动了，知道这个原理就行了。</p><h4 id="维护next数组" tabindex="-1"><a class="header-anchor" href="#维护next数组"><span>维护next数组</span></a></h4><p>在匹配中，如果模式串的第j个字符失配了就跳到next[j]位置上继续比较，这个next数组就是由上面的部分匹配值来的。</p><p>在网络上有着多种的next表示的形式，但是究其本质是一样的。具体使用哪一种需要根据题目中的信息来判断，在这里我给出具体的计算方法：</p><ol><li>形如[0, 1, 2, 1, 1, 2]；开头为0的next数组。<br> 这个是怎样来的呢？将上面得出来的字符串的部分匹配值右移一位，第一位补0，其余为全部加一。</li><li>形如[-1, 0, 1, 0, 0, 1]：开头为-1的next数组。<br> 这个是将第1种的next数组每一位减1得到的。</li></ol><p>为什么会有这两种呢？因为是字符串的起始位置定义不同。第1种的起始位置视为1，第2种起始位置视为0。</p><h3 id="kmp算法的优化" tabindex="-1"><a class="header-anchor" href="#kmp算法的优化"><span>KMP算法的优化</span></a></h3><p>在使用next数组时其实还是有着缺陷。在某些时候还是会有多余地比较，所有在这里继续对其优化，得到nextval数组。</p><p>优化方法：首先得到next数组，nextval数组的第一位是和next数组中的第一位一样的，然后比较<strong>next[i]对着的模式串字符</strong>和<strong>模式串[next[i]]</strong>，若两者相等则nextval[i]就为模式串[next[i]]对应的nextval值，否则nextval[i]就为next[i]。</p><p>下面举个例子：</p><p>字符串：&quot;aabbaa&quot;</p><ol><li>采用开头为0的next数组<br> 部分匹配值为：[0, 1, 0, 0, 1, 2]<br> next数组：[0, 1, 2, 1, 1, 2] （右移并加1 补0）<br> nextval数组：[0, 0, 2, 1, 0, 0] （进行比较）</li><li>采用开头为-1的next数组<br> next数组为：[-1, 0, 1, 0, 0, 1] （每位减1）<br> nextval数组为：[-1, -1, 1, 0, -1, -1] （进行比较）</li></ol><p><strong>这一部分最重要的就是KMP算法，出题为算next数组、nextval数组、比较次数、滑动距离。</strong></p>',58)]))}]]),e=JSON.parse('{"path":"/cs-basic/data-structure/string.html","title":"串","lang":"zh-CN","frontmatter":{"title":"串","categories":["408","数据结构","串"],"icon":"paper-plane","description":"串的定义 定义：由零个或多个字符组成的有限序列。 记为：S = \'a1​a2​...an​\' (n≥1) S是串的名称，其中字符个数称为串的长度。当n = 0时，称其为空串。 串中任意多个连续的子序列称为该串的子串。包含这个子串的字符串称为主串。子串在主串中的位置是子串与主串相同时子串第一个字符在主串中的位置。 如：主串\\"I AM A PIG\\"中有个子...","head":[["meta",{"property":"og:url","content":"https://github.com/amatureemoprince/TechnologyAndLife/cs-basic/data-structure/string.html"}],["meta",{"property":"og:site_name","content":"Java咖啡馆"}],["meta",{"property":"og:title","content":"串"}],["meta",{"property":"og:description","content":"串的定义 定义：由零个或多个字符组成的有限序列。 记为：S = \'a1​a2​...an​\' (n≥1) S是串的名称，其中字符个数称为串的长度。当n = 0时，称其为空串。 串中任意多个连续的子序列称为该串的子串。包含这个子串的字符串称为主串。子串在主串中的位置是子串与主串相同时子串第一个字符在主串中的位置。 如：主串\\"I AM A PIG\\"中有个子..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://camo.githubusercontent.com/f8aff397da09a4481fafc8b6a694254acee573318a5f7f7af52be7833c9a448e/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f79757175652f302f323032352f706e672f34383037333733302f313734313537323136313939372d31336662666530652d356364322d346234622d626131352d3135623837306334336338652e706e67"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-10T06:29:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-10T06:29:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"串\\",\\"image\\":[\\"https://camo.githubusercontent.com/f8aff397da09a4481fafc8b6a694254acee573318a5f7f7af52be7833c9a448e/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f79757175652f302f323032352f706e672f34383037333733302f313734313537323136313939372d31336662666530652d356364322d346234622d626131352d3135623837306334336338652e706e67\\"],\\"dateModified\\":\\"2025-03-10T06:29:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"阿杰 like coding bug ❥\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"git":{"createdTime":1741330391000,"updatedTime":1741588146000,"contributors":[{"name":"lj","username":"lj","email":"2069057986@qq.com","commits":4,"url":"https://github.com/lj"}]},"readingTime":{"minutes":6.53,"words":1958},"filePathRelative":"cs-basic/data-structure/string.md","localizedDate":"2025年3月7日","excerpt":"<h2>串的定义</h2>\\n<blockquote>\\n<p>定义：由零个或多个字符组成的有限序列。</p>\\n</blockquote>\\n<p>记为：S = \'<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><msub><mi>a</mi><mn>2</mn></msub><mi mathvariant=\\"normal\\">.</mi><mi mathvariant=\\"normal\\">.</mi><mi mathvariant=\\"normal\\">.</mi><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\\"application/x-tex\\">a_1a_2...a_n</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.5806em;vertical-align:-0.15em;\\"></span><span class=\\"mord\\"><span class=\\"mord mathnormal\\">a</span><span class=\\"msupsub\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.3011em;\\"><span style=\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\">1</span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.15em;\\"><span></span></span></span></span></span></span><span class=\\"mord\\"><span class=\\"mord mathnormal\\">a</span><span class=\\"msupsub\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.3011em;\\"><span style=\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\">2</span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.15em;\\"><span></span></span></span></span></span></span><span class=\\"mord\\">...</span><span class=\\"mord\\"><span class=\\"mord mathnormal\\">a</span><span class=\\"msupsub\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.1514em;\\"><span style=\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mathnormal mtight\\">n</span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.15em;\\"><span></span></span></span></span></span></span></span></span></span>\'  (<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding=\\"application/x-tex\\">n \\\\geq 1</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.7719em;vertical-align:-0.136em;\\"></span><span class=\\"mord mathnormal\\">n</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span><span class=\\"mrel\\">≥</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6444em;\\"></span><span class=\\"mord\\">1</span></span></span></span>)</p>","autoDesc":true}')}}]);